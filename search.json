[{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Multiple_model_calculation_of_trophic_position_in_R.html","id":"trophicposition","dir":"Articles","previous_headings":"","what":"tRophicPosition","title":"Using tRophicPosition to estimate TP through the use of multiple models","text":"tRophicPosition, R package incorporating Bayesian model calculation trophic position using stable isotopes one two baselines. 2022-12-11, current version package 0.8. tRophicPosition uses powerful approach Markov Chain Monte Carlo simulations provided JAGS statistical language R. Vignettes can browsed browseVignettes(\"tRophicPosition\").","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Multiple_model_calculation_of_trophic_position_in_R.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using tRophicPosition to estimate TP through the use of multiple models","text":"vignette, introduce new functions developed tRophicPosition version 0.6.8. functions multiModelTP(), credibilityIntervals(), pairwiseComparisons() parametricTP(). functions accomplish different tasks within Bayesian estimation trophic position stable isotopes, facilitating calculation multiple models (either one, two baselines /two baselines full model trophic position) single species, pairwise comparisons posterior estimates trophic position /alpha parameters, plotting credibility intervals posterior estimates trophic position /alpha, calculation parametric (non-Bayesian) estimate trophic position.","code":""},{"path":[]},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Multiple_model_calculation_of_trophic_position_in_R.html","id":"stable-version---cran","dir":"Articles","previous_headings":"Introduction > Installing and loading the package","what":"Stable version - CRAN","title":"Using tRophicPosition to estimate TP through the use of multiple models","text":"First , need install JAGS platform, install stable version tRophicPosition CRAN: , load package :","code":"install.packages(\"tRophicPosition\") library(tRophicPosition)"},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Multiple_model_calculation_of_trophic_position_in_R.html","id":"development-version---github","dir":"Articles","previous_headings":"Introduction > Installing and loading the package","what":"Development version - GitHub","title":"Using tRophicPosition to estimate TP through the use of multiple models","text":"want install development version tRophicPosition, must install GitHub. , use function install_github() package devtools (installation instructions ), needs installed previously (either CRAN GitHub): working Windows, devtools also requires Rtools, working Mac, Xcode (Apple Store). Linux need install compiler various development libraries. Besides installing devtools, must also install JAGS (Just Another Gibbs Sampler), core Bayesian model analysis supporting tRophicPosition. installing tRophicPosition, loaded memory, automatically reports version software (need least 0.6.8-8 use routines described vignette).","code":"install.packages(\"devtools\") library(devtools) install_github(\"clquezada/tRophicPosition\", build_vignettes = TRUE) library(tRophicPosition) ## This is tRophicPosition 0.8.0"},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Multiple_model_calculation_of_trophic_position_in_R.html","id":"future-releases-and-how-to-get-support","dir":"Articles","previous_headings":"Introduction","what":"Future releases and how to get support","title":"Using tRophicPosition to estimate TP through the use of multiple models","text":"encouraged use tRophicPosition data, test package see issues problems. can send questions commentaries google group tRophicPosition-support directly email trophicposition-support@googlegroups.com. can send questions https://stackexchange.com/ https://stackoverflow.com/ even Facebook (stable isotope ecology group). constantly working future releases tRophicPosition, feedback much appreciated.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Multiple_model_calculation_of_trophic_position_in_R.html","id":"calculation-of-tp-for-one-species-using-multiple-bayesian-models","dir":"Articles","previous_headings":"","what":"Calculation of TP for one species using multiple Bayesian models","title":"Using tRophicPosition to estimate TP through the use of multiple models","text":"demonstrate tRophicPosition works, simulate data. example, imagine fish species interest mean (±\\pm SD) values δ15\\delta^{15}N 21‰ (±\\pm 1‰), δ13\\delta^{13}C -15‰ (±\\pm 1‰). Also, many aquatic ecosystems, fish lives system two sources C N, meaning deal two different baselines. One baselines mean (±\\pm SD) values δ15\\delta^{15}N 14.2‰ (±\\pm 1‰) δ13\\delta^{13}C -17.3‰ (±\\pm 1‰), baseline mean values 15.4‰ (±\\pm 1‰) -12.7‰ (±\\pm 1‰) (δ15\\delta^{15}N δ13\\delta^{13}C respectively). use function generateTPData() simulate simple ecosystem. function also indicated mean sd values trophic discrimination factors DeltaN (Δ\\DeltaN) DeltaC (Δ\\DeltaC), also indicated name consumer. Remember functions help page find options (write example ?generateTPData console). Now simple ecosystem simulated, plot :  figure can see sample simulated fish consumers exactly located -baselines δ13\\delta^{13}C axis, also, fish 6.8‰ baseline 1 terms δ15\\delta^{15}N value. use one baseline model, trophic level baseline 1 (lambda) 2, expect mean trophic position 4 simulated fish species. use two baselines model without fractionation carbon, expect alpha value 0.5, means baseline contributing 50% energy inputs fish. Finally, use two baselines full model (including fractionation δ13\\delta^{13}C), trophic position fish depend baselines, relative contribution baseline depend trophic discrimination factors (Δ\\DeltaN Δ\\DeltaC). Clearly, worth exploring , calculate (compare) estimates TP using models function multiModelTP(). multiModelsTP() requires object class isotopeData, created previously function generateTPData(). default multiModelsTP() defines lambda = 2 baselines, uses 2 chains (n.chains = 2) Bayesian calculation 20,000 adaptive iterations (n.adapt = 20000), 20,000 actual iterations (n.iter = 20000), 20,000 iterations burnin (burnin = 20000) thinning 10 (thin = 10). Furthermore, estimates TP using three different Bayesian models: one baseline, two baselines two baselines full (models = c(\"oneBaseline\", \"twoBaselines\", \"twoBaselinesFull\"). default setting limit amount output model run (print = FALSE). NB: user can change options, simply adding arguments multiModelTP(), see ?multiModelTP() details. Also, default function uses Post’s (2002) assumptions TDF (.e. 56 values mean 3.4 ±\\pm 0.98 SD Δ\\DeltaN 107 values mean 0.39 ±\\pm 1.3 SD Δ\\DeltaC). example, used option print = TRUE argument (.e. multiModelTP(print = TRUE)), trace plot every model (check graphically parameters interest TP, muDeltaN alpha converged), 1 chain used, also printed two statistics coda package: Gelman Rubin’s convergence diagnostic statistics (see ?gelman.diag detailed explanation). Basically, expect potential scale reduction factors parameter close 1, means model converged reliable. estimates generated using Post’s (2002) mean estimates TDFs, commonly used across wide range ecological studies. Now calculated trophic position simulated fish simple ecosystem, calculation, time, change trophic discrimination factor Post’s (2002) values McCutchan’s et al. (2003) values order examine sensitivity models TDF estimates. , generate consumer2 isotope values consumer1 simply change variables deltaN deltaC within object consumer2. now calculate three Bayesian models trophic position , difference changed TDF values. cases calculated three Bayesian models (one baseline, two baselines without fractionation C, two baselines full model C fractionation) two simulated simple ecosystems consisting one fish 2 baselines, difference consumer 1 consumer 2 trophic discrimination factor. first case included Post’s (2002) values, second case included McCutchan’s et al. (2003) values N C. saved output multiModelTP() two objects consumer1_models consumer2_models, now analyze results. using RStudio, environment tab see consumer1_models consumer2_models lists 4 elements . first element data frame named TP. dataframe posterior samples TP model. second element also data frame, named alpha case, includes posterior samples alpha 2 3 models (two baselines models calculate alpha, .e. relative contribution baseline 1). third element data frame well, named gg (indicate us structure required use ggplot2 package). data frame summary values posterior samples trophic position alpha: median 95% credibility interval, grouped model, community species. fourth last element list 3 elements named samples, raw posterior mcmc samples want summarise information, analyze different way. first three elements (data frames TP, alpha gg) based raw posterior samples every Bayesian model, summarised multiModelsTP() convenience. can produce detailed summary structure described using function str(): order plot mode 95% credibility interval posterior trophic position alpha, can use function credibilityIntervals():  figure provides mode (±\\pm 95% credibility interval) posterior estimates trophic position three different models (one baseline two baselines two baselines full), well alpha (given two baselines models).  arguments df = consumer1_models$gg x = model , tells function credibilityIntervals() plot data frame consumer1_models$gg using model column within data frame independent variable (x), default using mode central tendency descriptor (see credibilityIntervals() details). want plot median instead mode add y1 = \"median y2 = \"alpha.median\" arguments within credibilityIntervals(). multiple species several communities change (e.g. see vignette multiple species calculation trophic position).","code":"consumer1 <- generateTPData(dCb1 = -17.3, dNb1 = 14.2,                             dCc = -15, dNc = 21,                             dCb2 = -12.7, dNb2 = 15.4,                             DeltaN = 3.4, sd.DeltaN = 0.98,                             DeltaC = 0.39, sd.DeltaC = 1.3,                             consumer = \"Consumer 1\") plot(consumer1) consumer1_models <- multiModelTP(consumer1) ## Compiling model graph ##    Resolving undeclared variables ##    Allocating nodes ## Graph information: ##    Observed stochastic nodes: 106 ##    Unobserved stochastic nodes: 31 ##    Total graph size: 149 ##  ## Initializing model ##  ## Compiling model graph ##    Resolving undeclared variables ##    Allocating nodes ## Graph information: ##    Observed stochastic nodes: 206 ##    Unobserved stochastic nodes: 14 ##    Total graph size: 243 ##  ## Initializing model ##  ## Compiling model graph ##    Resolving undeclared variables ##    Allocating nodes ## Graph information: ##    Observed stochastic nodes: 313 ##    Unobserved stochastic nodes: 66 ##    Total graph size: 404 ##  ## Initializing model consumer2 <- generateTPData(dCb1 = -17.3, dNb1 = 14.2,                             dCc = -15, dNc = 21,                             dCb2 = -12.7, dNb2 = 15.4,                             consumer = \"Consumer 2\")  consumer2$deltaN <- TDF(author = \"McCutchan\", element = \"N\") ## You selected McCutchan's et al (2003) ##                   All d15N: 73 values with mean 2.3 +- 0.18 se consumer2$deltaC <- TDF(author = \"McCutchan\", element = \"C\") ## You selected McCutchan's et al (2003) ##                   All d13C: 102 values with mean 0.5 +- 0.13 se consumer2_models <- multiModelTP(consumer2) ## Compiling model graph ##    Resolving undeclared variables ##    Allocating nodes ## Graph information: ##    Observed stochastic nodes: 123 ##    Unobserved stochastic nodes: 31 ##    Total graph size: 166 ##  ## Initializing model ##  ## Compiling model graph ##    Resolving undeclared variables ##    Allocating nodes ## Graph information: ##    Observed stochastic nodes: 223 ##    Unobserved stochastic nodes: 14 ##    Total graph size: 260 ##  ## Initializing model ##  ## Compiling model graph ##    Resolving undeclared variables ##    Allocating nodes ## Graph information: ##    Observed stochastic nodes: 325 ##    Unobserved stochastic nodes: 66 ##    Total graph size: 416 ##  ## Initializing model str(consumer1_models) # For consumer 1 (based on Post's (2002) TDF values) credibilityIntervals(consumer1_models$gg, x = \"model\") # For consumer 2 (based on McCutchan's (2003) TDF values) credibilityIntervals(consumer2_models$gg, x = \"model\")"},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Multiple_model_calculation_of_trophic_position_in_R.html","id":"why-we-need-of-accurate-trophic-discrimination-factors-tdf","dir":"Articles","previous_headings":"Calculation of TP for one species using multiple Bayesian models","what":"Why we need of accurate trophic discrimination factors (TDF)?","title":"Using tRophicPosition to estimate TP through the use of multiple models","text":"Probably, single important assumption get accurate reliable estimations trophic position trophic discrimination factor, either nitrogen Δ15\\Delta^{15}N (one two baselines models) Δ\\DeltaN Δ\\DeltaC two baselines full model. Obviously, use non-representative TDF estimate either Δ\\DeltaN Δ\\DeltaC can affect trophic position estimations alpha parameter. Now examine impact using different TDFs simulated consumers. estimated trophic position alpha consumers groups (differing TDF) test statistical differences posterior samples parameters. First, must change names posterior samples, name (calculated multiModelsTP()): useful first step summarize posterior distributions get quantitative idea different . , use base function (.e. comes R) sapply(). function part lapply functions apply function (case summary) list. two lists (consumer1_models$TP consumer2_models$TP) first need use c operator, combines , calculate summary combined element: rudimentary summaries posterior trophic position estimates associated model consumers. example, median TP consumer 1 based one baseline model (Post-model1) higher consumer 1 calculated 2 baselines (Post-model2) 2 baselines full (Post-model2F) models. appears true consumer 2, median TP estimated one baseline model (McCutchan-model1) higher two baselines model (McCutchan-model2 McCutchan-model2F). operating Bayesian universe, little sense state threshold distributions considered different (used frequentist universe e.g. p > 0.05). Instead, think rather comparing posterior distributions. example, can say two posterior trophic position estimates considered different samples posterior distributions 100% different. stringent case considering Post-model1 McCutchan-model1 posterior estimates trophic position, expect posterior estimates Post-model1 lesser posterior estimates McCutchan-model1. , can see trophic position posterior estimate one baseline model using Post’s (2002) TDF assumptions proportion 4000 observations 4000 sampled (.e. 4000 / 4000 = 1) lesser equal trophic position posterior estimate one baseline model using McCutchan’s (2003) TDF assumptions. Thus, pretty confident posterior estimation trophic position calculated one baseline Bayesian model Post’s (2000) assumptions higher posterior estimation trophic position calculated McCutchan’s TDF assumptions. Remember simulated fish consumer, simple ecosystem, considering differents TDF assumptions. default compareTwoDistributions() evaluates many observations combined_models$\"Post-model1\" ≤\\leq (less equal) combined_models$\"McCutchan-model1\", randomly drawn models posterior distribution. can change ≥\\geq, << >> stating argument within pairwiseComparisons function (add test = \">=\", example). can make detailed comparison different models TDFs using pairwiseComparisons() function, name suggests, produces matrix pairwise comparisons: matrix generated function symmetrical, diagonal results quatifying proportion posterior samples model row less equal posterior samples model column, diagonal results quantifying proportion posterior samples model column higher posterior samples model row.","code":"# Here we see that we have 4002 posterior samples of 3 parameters # (one for each Bayesian model) for consumer1 str(consumer1_models$TP) ## List of 3 ##  $ 1b : num [1:4002] 4.09 3.91 3.94 3.73 3.93 ... ##  $ 2b : num [1:4002] 3.74 3.77 3.8 3.99 3.7 ... ##  $ 2bf: num [1:4002] 4.17 3.79 3.85 3.83 3.71 ... # And also 4002 posterior samples (for each 3 Bayesian models) for consumer2 str(consumer2_models$TP) ## List of 3 ##  $ 1b : num [1:4002] 4.82 4.76 4.65 4.78 4.94 ... ##  $ 2b : num [1:4002] 4.71 4.31 4.94 5.22 4.44 ... ##  $ 2bf: num [1:4002] 5.28 4.88 5.23 5.61 5.03 ... # But the names of each variables are the same for both consumers # For consumer1 names(consumer1_models$TP) ## [1] \"1b\"  \"2b\"  \"2bf\" # For consumer2 names(consumer2_models$TP) ## [1] \"1b\"  \"2b\"  \"2bf\" # So, we change them in order to compare them. # To make things clear, consumer 1 will be \"Post\" and consumer 2 will be # \"McCutchan\". # Also, one baseline Bayesian model will be model1, two  # baselines model will be model2 and two baselines full model will be model2F names(consumer1_models$TP) <- c(\"Post-model1\",                                  \"Post-model2\",                                 \"Post-model2F\") names(consumer2_models$TP) <- c(\"McCutchan-model1\",                                 \"McCutchan-model2\",                                 \"McCutchan-model2F\") # Here we combine posterior estimates of trophic position for both consumers combined_models <- c(consumer1_models$TP, consumer2_models$TP)  # Then we calculate a summary of posterior trophic position sapply(combined_models, summary) ##         Post-model1 Post-model2 Post-model2F McCutchan-model1 McCutchan-model2 ## Min.       3.608028    3.415638     3.493050         4.085558         4.003042 ## 1st Qu.    3.921280    3.756448     3.806252         4.808365         4.550024 ## Median     4.002738    3.827421     3.885791         4.986985         4.712765 ## Mean       4.006179    3.830818     3.888840         5.006483         4.733087 ## 3rd Qu.    4.084321    3.901013     3.962907         5.173656         4.899018 ## Max.       4.435879    4.246032     4.453742         6.580966         6.433009 ##         McCutchan-model2F ## Min.             4.093534 ## 1st Qu.          4.685633 ## Median           4.856066 ## Mean             4.875364 ## 3rd Qu.          5.045211 ## Max.             6.257308 # And we calculate the modes getPosteriorMode(combined_models) ##                Post.model1 Post.model2 Post.model2F McCutchan.model1 ## Posterior mode       4.003       3.824        3.895            4.956 ##                McCutchan.model2 McCutchan.model2F ## Posterior mode            4.671             4.827 compareTwoDistributions(combined_models$\"Post-model1\",                         combined_models$\"McCutchan-model1\",                          test = \"<=\") ## [1] 1 pairwiseComparisons(combined_models, test = \"<=\") ##                         [1]   [2]   [3]   [4]   [5]   [6] ## [1] Post-model1       0.000 0.135 0.241 1.000 0.998 1.000 ## [2] Post-model2       0.865 0.000 0.639 1.000 1.000 1.000 ## [3] Post-model2F      0.759 0.361 0.000 1.000 1.000 1.000 ## [4] McCutchan-model1  0.000 0.000 0.000 0.000 0.231 0.371 ## [5] McCutchan-model2  0.002 0.000 0.000 0.769 0.000 0.647 ## [6] McCutchan-model2F 0.000 0.000 0.000 0.629 0.353 0.000"},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Multiple_model_calculation_of_trophic_position_in_R.html","id":"parametric-trophic-position","dir":"Articles","previous_headings":"","what":"Parametric trophic position","title":"Using tRophicPosition to estimate TP through the use of multiple models","text":"appendix, calculate parametric (.e. non-Bayesian) version trophic position. , iterate consumer, calculation parametricTP().","code":"# First we combine both consumers' isotope values into a named list consumers <- list(\"consumer1\" = consumer1, \"consumer2\" = consumer2)  # And then, we calculate parametric TP using a loop for for (consumer in consumers) parametricTP(consumer) ## [1] \"***************************************\" ## [1] \"Parametric version of trophic position\" ## [1] \"For consumer:  Consumer 1\" ## [1] \"One baseline TP:  4\" ## [1] \"Two baselines TP:  3.82 0.5\" ## [1] \"Full model TP. At the beginning:  3.82 0.662\" ## [1] \"Convergence after  8  iterations. TP:  3.88  alpha:  0.665\" ## [1] \"***************************************\" ## [1] \"Parametric version of trophic position\" ## [1] \"For consumer:  Consumer 2\" ## [1] \"One baseline TP:  4.96\" ## [1] \"Two baselines TP:  4.7 0.5\" ## [1] \"Full model TP. At the beginning:  4.7 0.755\" ## [1] \"Convergence after  10  iterations. TP:  4.83  alpha:  0.763\""},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Multiple_species_calculation_of_trophic_position_in_R_1.html","id":"trophicposition","dir":"Articles","previous_headings":"","what":"tRophicPosition","title":"tRophicPosition: calculating trophic position for multiple species","text":"tRophicPosition, R package incorporating Bayesian model calculation trophic position using stable isotopes one two baselines. 2022-12-11, current version package 0.8. tRophicPosition uses powerful approach Markov Chain Monte Carlo simulations provided JAGS statistical language R. Vignettes can browsed browseVignettes(\"tRophicPosition\").","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Multiple_species_calculation_of_trophic_position_in_R_1.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"tRophicPosition: calculating trophic position for multiple species","text":"vignette, introduce new functions developed tRophicPosition version 0.6.8-9. functions extractIsotopeData(), jagsBayesianModel() multiSpeciesTP(). Aditionally, provide example run calculations parallel (maximizing efficient use computing power). functions accomplish different tasks within Bayesian estimation trophic position stable isotopes, extracting stable isotope data multiple species /communities, facilitating calculation trophic position multiple consumers within one ecosystems. also included parallel calculation trophic position, make full use multiple processor cores typical modern computers.","code":""},{"path":[]},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Multiple_species_calculation_of_trophic_position_in_R_1.html","id":"stable-version---cran","dir":"Articles","previous_headings":"Introduction > Installing and loading the package","what":"Stable version - CRAN","title":"tRophicPosition: calculating trophic position for multiple species","text":"First , need install JAGS platform, install stable version tRophicPosition CRAN: , load package :","code":"install.packages(\"tRophicPosition\") library(tRophicPosition)"},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Multiple_species_calculation_of_trophic_position_in_R_1.html","id":"development-version---github","dir":"Articles","previous_headings":"Introduction > Installing and loading the package","what":"Development version - GitHub","title":"tRophicPosition: calculating trophic position for multiple species","text":"want install development version tRophicPosition, must install GitHub. , use function install_github() package devtools (installation instructions ), needs installed previously (either CRAN GitHub): working Windows, devtools also requires Rtools, working Mac, Xcode (Apple Store). Linux need install compiler various development libraries. Besides installing devtools, must also install JAGS (Just Another Gibbs Sampler), core Bayesian model analysis supporting tRophicPosition. installing tRophicPosition, loaded memory, automatically reports version software (need least 0.6.8-8 use routines described vignette).","code":"install.packages(\"devtools\") library(devtools) install_github(\"clquezada/tRophicPosition\", build_vignettes = TRUE) library(tRophicPosition) ## This is tRophicPosition 0.8.0"},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Multiple_species_calculation_of_trophic_position_in_R_1.html","id":"future-releases-and-how-to-get-support","dir":"Articles","previous_headings":"Introduction","what":"Future releases and how to get support","title":"tRophicPosition: calculating trophic position for multiple species","text":"encouraged use tRophicPosition data, test package see issues problems. can send questions commentaries google group tRophicPosition-support directly email trophicposition-support@googlegroups.com. can send questions https://stackexchange.com/ https://stackoverflow.com/ even Facebook (stable isotope ecology group). constantly working future releases tRophicPosition, feedback much appreciated.","code":""},{"path":[]},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Multiple_species_calculation_of_trophic_position_in_R_1.html","id":"before-we-start","dir":"Articles","previous_headings":"Multiple species calculation of trophic position (TP)","what":"Before we start","title":"tRophicPosition: calculating trophic position for multiple species","text":"using R prior starting analysis tRophicPosition, possible environment contains unwanted data. Try organized possible data generated within R/RStudio, make things lot clearer. working analysis, good first thing set working directory convenient location. accomplished using setwd(). RStudio can use menu “Session/Set Working Directory” make things easier. next thing clear environment. RStudio can click little broom icon environment tab, use command rm(list = ls()). Also, good idea clear plots using broom icon plots tab, command graphics.(). needed working data .","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Multiple_species_calculation_of_trophic_position_in_R_1.html","id":"and-now-an-initial-analysis---bilagay-tp-from-multiple-coastal-kelp-forests-in-n-chile","dir":"Articles","previous_headings":"Multiple species calculation of trophic position (TP)","what":"And now, an initial analysis - Bilagay TP from multiple coastal kelp forests in N Chile","title":"tRophicPosition: calculating trophic position for multiple species","text":"start data fish common coastal kelp forests N Chile, bilagay Cheilodactylus variegatus (http://www.fishbase.se/summary/Cheilodactylus-variegatus.html). data number populations (associated filter feeding grazing molluscs representing pelagic benthic baselines respectively) series different locations along N Chilean coast. know literature bilagay diet extremely variable reflects locally available. also know marked δ15\\delta^{15}N-enrichment base food chain reflecting increased upwelling intensity move northwards coast. , need account variation baseline δ15\\delta^{15}N variation calculating TP site. , question , given potential influences local differences diet stomach contents upwelling intensity, measurable differences bilagay TP different locations along S-N latitudinal gradient? use data set included within tRophicPosition. structure file 7 columns, species (Spp) grouped functional groups (FG) describe role ecosystems: “Bilagay” (fish interest), “Benthic_BL” (benthic baseline) “Pelagic_BL” (pelagic baseline). samples locations along N Chilean coast (NS stands N-S ordering) multiple studies (Study) locations (Location). also stable isotope values two columns: “d13C” “d15N”. Structure file Bilagay_for_tRophicPosition.csv want edit raw data modify , open following file favourite application, save working directory load read.csv() read.table(). load Bilagay data set R, use data(): shown , data set combination Study Location variables, need concatenated. introduce mutate arrange functions package dplyr pipe operator %>% (magrittr loaded dplyr). Also, spreadsheet information latitudinal arrangement sampling sites, variable NS (North South order), ranging 1 (southern site) 10 (northern site). order whole data frame considering values. Now, ready proceed calculation trophic position. follows general process already encountered previous vignette (guide use tRophicPosition. First must consecutively subset data frame considering communities samples . use subset command, repeating command time community. 2 sampling sites, can done hand. However, different 10 sampling sites, task can prone errors time-consuming, repeat code 10 times, changes Location, selecting baseline, etc. deal issue, developed convenient function extractIsotopeData() can indicate text baselines respective column coded, consumers column, group column. function iterates data frame selecting unique values group column, extracting values belong group iterate within . extract stable isotope values columns “d13C” “d15N” (values haven’t changed) baseline. Finally, select unique value consumers column generate isotopeData class object consumer combining baselines isotope values. See help(extractIsotopeData) options. Δ\\DeltaN /Δ\\DeltaC values included arguments, default function use assumptions Post (2002), .e. 3.4 ±\\pm 0.98 sd nitrogen 0.39 ±\\pm 1.3 sd carbon). can change either TDF values using function TDF() list values, explained short guide use tRophicPosition vignette. next step use str function check went well use extractIsotopeData() function: execute code see lot information, vignette, shortened output make readable. console, note list 10 elements, followed sign $ concatenated name communities name species (Bilagay). objects (MEC-Coquimbo-Bilagay, MEC-Taltal-Bilagay, etc.) list 8 elements relate particular sampling location, structure ready use tRophicPosition: objects class isotopeData. class isotopeData special object recognized within package. also information embedded within : consumer, baseline 1, baseline 2, community labels, besides list isotope values convention introduced (dNb1 d15N baseline 1, dCb1 d13C baseline 1, dNb2 dCb2 respectively baseline 2, dNc dCc respectively consumer, deltaN deltaC trophic discrimination factors). Now, extracted community original data frame, can iterate , prepare summary plot . introduce command, one basic control-flow elements programming. , execute following code summary plot community, vignette, see one example.  Now model community within Bayesian framework tRophicPosition (introduced previously vignettes, e.g. guide use tRophicPosition. , developed function automatically ) defines Bayesian model, ii) initializes model iii) samples posterior distribution trophic position. accomplished using function multiSpeciesTP(), similar function multiModelsTP() explained vignette multiple models calculation tRophicPosition. default, function multiSpeciesTP() uses lambda = 2 (trophic level baselines), n.chains = 2 (number parallel MCMC simulations), set n.adapt, n.iter burnin 10000 iterations. model calculated default oneBaseline, case changed model = \"twoBaselinesFull\" two separate potential sources N C. particularly case, need explicitly state number adaptive iterations, iterations burnin, decided make clear. Also, calculate 5 chains instead default (.e. n.chains = 2). function multiSpeciesTP() returns 4 objects: 1. list named multiSpeciesTP, includes raw data returned posteriorTP() consumer/species per group/community/sampling location; 2. data frame named df mode, median credibility confidence interval trophic position alpha (two baselines model chosen), grouped model, consumer/species group/community/sampling location; 3. list named TPs posterior samples trophic position group/community/location consumer/species; 4. list named Alphas includes posterior samples alpha (relative contribution baseline 1) species group/community/location. advanced users likely directly access object subsequent analysis. now, concentrate plotting mode median 95% credibility interval Bilagay location, using joint values trophic position alpha community/location, allowing easy visual comparison :  get numerical summary posterior estimates (median 95% credibility interval) trophic position, can write following: Finally, can statistically compare whether either posterior samples trophic position /alpha alpha differ communities/locations. example compare posterior estimates accross communities/locations function pairwiseComparisons(). Remember output must read : probability consumer row Y posterior trophic position/alpha less equal consumer column X. make readable output, compare first 8 communities/locations. want compare communities/locations, just remove [1:8] :","code":"system.file(\"extdata\", \"Bilagay_for_tRophicPosition.csv\", package = \"tRophicPosition\") ## [1] \"/home/runner/work/_temp/Library/tRophicPosition/extdata/Bilagay_for_tRophicPosition.csv\" data(\"Bilagay\") # install.packages(dplyr) if you haven't installed it before library(dplyr) Bilagay <- Bilagay %>% mutate(Community = paste(Study,\"-\", Location, sep = \"\")) Bilagay <- Bilagay %>% arrange(NS) BilagayList <- extractIsotopeData(Bilagay, b1 = \"Pelagic_BL\", b2 = \"Benthic_BL\",                                   baselineColumn = \"FG\", consumersColumn = \"Spp\",                                   groupsColumn = \"Community\",                                   d13C = \"d13C\", d15N = \"d15N\") str(BilagayList) ## List of 1 ##  $ MEC-Coquimbo-Bilagay:List of 8 ##   ..$ dNb1  : num [1:15] 13.8 14.3 14.2 13.4 13.8 13.3 14.6 14 14.2 13.9 ... ##   ..$ dCb1  : num [1:15] -17.3 -17.6 -17.4 -16.6 -17 -16.9 -18.5 -18.1 -17.5 -18.3 ... ##   ..$ dNb2  : num [1:28] 14.9 15.2 15 15.2 16.3 15.7 15.4 15.5 16.4 15.4 ... ##   ..$ dCb2  : num [1:28] -11.1 -11.9 -11.7 -11.5 -14.6 -13.8 -14.5 -14.3 -14.6 -13.9 ... ##   ..$ deltaN: num [1:56] 2.48 3.21 3.81 2.28 3.74 ... ##   ..$ deltaC: num [1:107] -1.158 -0.129 0.719 -1.45 0.622 ... ##   ..$ dNc   : num [1:10] 19.4 19 19.1 18.3 19.8 20.1 19.6 20.3 19.5 19.9 ##   ..$ dCc   : num [1:10] -16.2 -16.7 -17.8 -16.5 -16.8 -17.8 -16.3 -15.5 -16.3 -16 ##   ..- attr(*, \"class\")= chr \"isotopeData\" ##   ..- attr(*, \"consumer\")= chr \"Bilagay\" ##   ..- attr(*, \"baseline1\")= chr \"Pelagic_BL\" ##   ..- attr(*, \"baseline2\")= chr \"Benthic_BL\" ##   ..- attr(*, \"group\")= chr \"MEC-Coquimbo\" for (community in BilagayList) {   print(summary(community))   plot(community)   } ##  ## Summary for stable isotope data object  ##  ## Group  MEC-Coquimbo  ## Consumer  Bilagay  ## Baseline 1  Pelagic_BL  ## Baseline 2  Benthic_BL  ##  ##        n   mean  sd  se  min   max   median ## dNb1   15  13.7  0.7 0.2 12.1  14.6  13.8   ## dCb1   15  -17.5 0.6 0.1 -18.5 -16.6 -17.5  ## dNb2   28  15.4  0.5 0.1 14.6  16.4  15.3   ## dCb2   28  -13.3 1.2 0.2 -15.1 -11.1 -13.8  ## deltaN 56  3.4   1   0.1 1.1   5.4   3.3    ## deltaC 107 0.4   1.3 0.1 -3.2  3     0.6    ## dNc    10  19.5  0.6 0.2 18.3  20.3  19.6   ## dCc    10  -16.6 0.7 0.2 -17.8 -15.5 -16.4 Bilagay_models <- multiSpeciesTP(BilagayList, model = \"twoBaselinesFull\",                                              n.adapt = 10000, n.iter = 10000,                                              burnin = 10000, n.chains = 5, print = FALSE) ## Compiling model graph ##    Resolving undeclared variables ##    Allocating nodes ## Graph information: ##    Observed stochastic nodes: 269 ##    Unobserved stochastic nodes: 36 ##    Total graph size: 330 ##  ## Initializing model # By default the mode is used in both trophic position and alpha plots credibilityIntervals(Bilagay_models$df, x = \"group\", xlab =\"Community\")  # If you want to use the median instead of the mode, # just add y1 and y2 as arguments credibilityIntervals(Bilagay_models$df, x = \"group\", xlab =\"Community\",                       y1 = \"median\", y2 = \"alpha.median\") # To get a numerical summary sapply(Bilagay_models$\"TPs\", quantile, probs = c(0.025, 0.5, 0.975)) %>% round(3)  # To get the mode getPosteriorMode(Bilagay_models$\"TPs\") ##       MEC.Coquimbo.Bilagay.2bf MEC.Taltal.Bilagay.2bf MEL.COL.Bilagay.2bf ## 2.5%                     3.449                  2.920               3.337 ## 50%                      3.660                  3.192               3.463 ## 97.5%                    3.893                  3.483               3.612 ##       MEL.CHI.Bilagay.2bf MEL.RIN.Bilagay.2bf Fondecyt.ISM.Bilagay.2bf ## 2.5%                3.557               3.400                    3.278 ## 50%                 3.703               3.545                    3.482 ## 97.5%               3.865               3.711                    3.717 ##       MEL.LAG.Bilagay.2bf MEL.LOB.Bilagay.2bf MEL.MEJ.Bilagay.2bf ## 2.5%                3.089               3.246               3.218 ## 50%                 3.206               3.384               3.342 ## 97.5%               3.333               3.533               3.487 ##       MEC.Tocopilla.Bilagay.2bf ## 2.5%                      3.547 ## 50%                       3.762 ## 97.5%                     4.006 ##                MEC.Coquimbo.Bilagay.2bf MEC.Taltal.Bilagay.2bf ## Posterior mode                    3.659                  3.182 ##                MEL.COL.Bilagay.2bf MEL.CHI.Bilagay.2bf MEL.RIN.Bilagay.2bf ## Posterior mode               3.461               3.697               3.542 ##                Fondecyt.ISM.Bilagay.2bf MEL.LAG.Bilagay.2bf MEL.LOB.Bilagay.2bf ## Posterior mode                    3.476               3.205               3.381 ##                MEL.MEJ.Bilagay.2bf MEC.Tocopilla.Bilagay.2bf ## Posterior mode               3.338                     3.762 # First, we compare bilagay posterior trophic position estimates pairwiseTP <- pairwiseComparisons(Bilagay_models$TPs[1:8], print = TRUE)  # And then, we compare their posterior alpha estimates pairwiseAlpha <- pairwiseComparisons(Bilagay_models$Alphas[1:8], print = TRUE) ##                                [1]   [2]   [3]   [4]   [5]   [6]   [7]   [8] ## [1] MEC.Coquimbo.Bilagay.2bf 0.000 0.005 0.071 0.628 0.206 0.138 0.000 0.022 ## [2] MEC.Taltal.Bilagay.2bf   0.995 0.000 0.958 0.998 0.981 0.949 0.541 0.880 ## [3] MEL.COL.Bilagay.2bf      0.929 0.042 0.000 0.987 0.777 0.550 0.002 0.219 ## [4] MEL.CHI.Bilagay.2bf      0.372 0.002 0.013 0.000 0.081 0.056 0.000 0.001 ## [5] MEL.RIN.Bilagay.2bf      0.794 0.019 0.223 0.919 0.000 0.326 0.001 0.071 ## [6] Fondecyt.ISM.Bilagay.2bf 0.862 0.051 0.450 0.944 0.674 0.000 0.014 0.236 ## [7] MEL.LAG.Bilagay.2bf      1.000 0.459 0.998 1.000 0.999 0.986 0.000 0.970 ## [8] MEL.LOB.Bilagay.2bf      0.978 0.120 0.781 0.999 0.929 0.764 0.030 0.000 ##                                [1]   [2]   [3]   [4]   [5]   [6]   [7]   [8] ## [1] MEC.Coquimbo.Bilagay.2bf 0.000 0.528 0.809 0.622 0.838 0.026 0.899 0.813 ## [2] MEC.Taltal.Bilagay.2bf   0.472 0.000 0.805 0.614 0.835 0.019 0.897 0.805 ## [3] MEL.COL.Bilagay.2bf      0.191 0.195 0.000 0.272 0.544 0.006 0.682 0.535 ## [4] MEL.CHI.Bilagay.2bf      0.378 0.386 0.728 0.000 0.770 0.012 0.861 0.753 ## [5] MEL.RIN.Bilagay.2bf      0.162 0.165 0.456 0.230 0.000 0.004 0.639 0.493 ## [6] Fondecyt.ISM.Bilagay.2bf 0.974 0.981 0.994 0.988 0.996 0.000 0.997 0.994 ## [7] MEL.LAG.Bilagay.2bf      0.101 0.103 0.318 0.139 0.361 0.003 0.000 0.351 ## [8] MEL.LOB.Bilagay.2bf      0.187 0.195 0.465 0.247 0.507 0.006 0.649 0.000"},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Multiple_species_calculation_of_trophic_position_in_R_1.html","id":"parallel-trophic-position","dir":"Articles","previous_headings":"Multiple species calculation of trophic position (TP)","what":"Parallel trophic position","title":"tRophicPosition: calculating trophic position for multiple species","text":"appendix, estimate trophic position using parallel calculations. use library parallel comes base R. First create parallel socket cluster, .e. create set copies R running parallel. done function makePSOCKcluster() detecting number cores detectCores(). use function parLapply(). function parallel version lapply() function applies function list. coded tRophicPosition specifically use lists, can calculate trophic position number species parallel rather series. just comparing performance serial vs parallel version multiModelTP, use just 500 adaptive iterations 500 actual iterations discarding 500 iterations burnin: see modest MacBook Air (Intel Core i5, 1.6 GHz, 4 cores) elapsed time serial version multiModelTP() roughly 92 seconds, using parallel version, analysis time reduced almost 50 % (44 seconds), trivial difference. However, desktop pc running Windows 10 (i7 3930-K, 3.2 GHz, 12 cores), serial version took 73 seconds, parallel version took 14 seconds.","code":"cl <- parallel::makePSOCKcluster(parallel::detectCores()) # First we calculate the time elapsed with system.time() with parallel time_parallel <- system.time(a <- parallel::parLapply(cl, BilagayList, multiModelTP,                                                 adapt = 500, n.iter = 500,                                                burnin = 500))  # Then we calculate the elapsed time with the normal version time_serial <- system.time(b <- lapply(BilagayList, multiModelTP, quiet = TRUE,                                                 adapt = 500, n.iter = 500,                                                burnin = 500))  # We have to stop the cluster after each set of calculations parallel::stopCluster(cl)  # And print the elapsed time print(rbind(time_parallel, time_serial)) ##               user.self sys.self elapsed user.child sys.child ## time_parallel     0.122    0.097  44.455      0.008     0.075 ## time_serial      85.587    1.432  92.284      0.000     0.000"},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Short_guide_to_tRophicPosition.html","id":"trophicposition","dir":"Articles","previous_headings":"","what":"tRophicPosition","title":"Short guide to the use of tRophicPosition","text":"tRophicPosition, R package incorporating Bayesian model calculation consumer trophic position using stable isotopes one two baselines. 2022-12-11, current version package 0.8. tRophicPosition uses powerful approach Markov Chain Monte Carlo simulations provided JAGS statistical language R. Vignettes can browsed browseVignettes(\"tRophicPosition\").","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Short_guide_to_tRophicPosition.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Short guide to the use of tRophicPosition","text":"vignette, provide short guide use tRophicPosition current version (0.8).","code":""},{"path":[]},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Short_guide_to_tRophicPosition.html","id":"stable-version---cran","dir":"Articles","previous_headings":"Introduction > Installing and loading the package","what":"Stable version - CRAN","title":"Short guide to the use of tRophicPosition","text":"First , need install JAGS platform, install stable version tRophicPosition CRAN: , load package :","code":"install.packages(\"tRophicPosition\") library(tRophicPosition)"},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Short_guide_to_tRophicPosition.html","id":"development-version---github","dir":"Articles","previous_headings":"Introduction > Installing and loading the package","what":"Development version - GitHub","title":"Short guide to the use of tRophicPosition","text":"want install development version tRophicPosition, must install GitHub. , use function install_github() package devtools (installation instructions ), needs installed previously (either CRAN GitHub): working Windows, devtools also requires Rtools, working Mac, Xcode (Apple Store). Linux need install compiler various development libraries. Besides installing devtools, must also install JAGS (Just Another Gibbs Sampler), core Bayesian model analysis supporting tRophicPosition. installing tRophicPosition, loaded memory, automatically reports version software (need least 0.6.8-8 use routines described vignette).","code":"install.packages(\"devtools\") library(devtools) install_github(\"clquezada/tRophicPosition\", build_vignettes = TRUE) library(tRophicPosition) ## This is tRophicPosition 0.8.0"},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Short_guide_to_tRophicPosition.html","id":"future-releases-and-how-to-get-support","dir":"Articles","previous_headings":"Introduction","what":"Future releases and how to get support","title":"Short guide to the use of tRophicPosition","text":"encouraged use tRophicPosition data, test package see issues problems. can send questions commentaries google group tRophicPosition-support directly email trophicposition-support@googlegroups.com. can send questions https://stackexchange.com/ https://stackoverflow.com/ even Facebook (stable isotope ecology group). constantly working future releases tRophicPosition, feedback much appreciated.","code":""},{"path":[]},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Short_guide_to_tRophicPosition.html","id":"loading-data-into-r","dir":"Articles","previous_headings":"Working with tRophicPosition","what":"Loading data into R","title":"Short guide to the use of tRophicPosition","text":"use tRophicPosition, need load data R. can use function prefer (e.g. read.csv, read.table, etc.) accomplish . convenience, included csv file within package load read.csv. dataset Bilagay-MEC.csv includes δ13\\delta^{13}C δ15\\delta^{15}N stable isotope data one locality bilagay Cheilodactylus variegatus (http://www.fishbase.se/summary/Cheilodactylus-variegatus.html), fish common coastal kelp forests N Chile. also includes δ13\\delta^{13}C δ15\\delta^{15}N two groups primary consumers: one provides long-term integrated indicator pelagic baseline (filter feeding bivalves) another benthic baseline (grazing gastropods), following Post (2002). case indicated system.file function locate file within package. loading file, need extract stable isotope data convert format recognized package. want use package data, need use data frame similar structure: FG stands functional group, NS refers integer representing north south ordering locations. extract stable isotope data data frame use function provided package called loadIsotopeData(). default, function extracts δ13\\delta^{13}C δ15\\delta^{15}N stable isotope values columns d13C d15N, grouping observations consumer, one two baselines group identifier (community, can location, time etc): case indicated observations coincide “Pelagic_BL” column “FG” extracted baseline1, observations coincide “Benthic_BL” column extracted baseline2. also, observations coincide “Bilagay” column “FG” coincide “Coquimbo” column “location” extracted consumer values. options available, can found help(loadIsotopeData). essential component model estimate trophic position trophic discrimination factor (TDF). default function loadIsotopeData() returns Δ\\DeltaN (3.4 ±\\pm 0.98 sd) Δ\\DeltaC (0.39 ±\\pm 1.3 sd) based Post’s (2002) assumptions. can change assumption use values, simply adding arguments within call function. example, get McCutchan’s et al (2003) values TDF, instead Post’s (2002) assumptions write following: Instead using mean values ±\\pm sd, one possibility including uncertainty TDF using raw data. can use list values given knowledge consumer colleague’s information, e.g. deltaN = c(2, 2.1, 1.9, 2.01, 2.2) /deltaC = c(0.3, 0.31, 0.4, 0.32). ##Plot data point consumer object (stable isotope values bilagay), pelagic benthic baselines (case, δ13\\delta^{13}C δ15\\delta^{15}N values filter feeding [pelagic indicator] grazing [benthic indicator] primary consumer molluscs) plus TDF assumptions based Post (2002). plot data check everything fine:  see data fish bilagay lay δ13\\delta^{13}C baselines, 15^{15}N-enriched relative baselines (also apparently differ δ15\\delta^{15}N values). several options estimating bilagay trophic position. can calculate single baseline Bayesian trophic position model includes TDF nitrogen, can include baselines (seeing different δ15\\delta^{15}N values, seems reasonable), can include fractionation nitrogen carbon. – first estimate TP using single baseline, calculate full model, including baselines TDF nitrogen carbon.","code":"BilagayMEC <- read.csv(system.file(\"extdata\", \"Bilagay-MEC.csv\",                                    package = \"tRophicPosition\")) head(BilagayMEC) ##   Study Location                       Spp         FG  d13C d15N NS ## 1   MEC Coquimbo Echinolittorina peruviana Benthic_BL -11.1 14.9  1 ## 2   MEC Coquimbo Echinolittorina peruviana Benthic_BL -11.9 15.2  1 ## 3   MEC Coquimbo Echinolittorina peruviana Benthic_BL -11.7 15.0  1 ## 4   MEC Coquimbo Echinolittorina peruviana Benthic_BL -11.5 15.2  1 ## 5   MEC Coquimbo         Prisogaster niger Benthic_BL -14.6 16.3  1 ## 6   MEC Coquimbo         Prisogaster niger Benthic_BL -13.8 15.7  1 consumer <- loadIsotopeData(BilagayMEC, consumer = \"Bilagay\", consumersColumn = \"FG\",                             b1 = \"Pelagic_BL\", b2 = \"Benthic_BL\",                             baselineColumn = \"FG\",                             group = \"Coquimbo\", groupsColumn = \"Location\") # First we get TDF values from the internal database using McCutchan's et al # (2003) paper TDF_values <- TDF(author = \"McCutchan\", element = \"both\", type = \"muscle\") ## You selected McCutchan's et al (2003) ##                   Muscle tissue d15N: 15 values with mean 2.9 +- 0.32 se ## Muscle tissue d13C: 18 values with mean 1.3 +- 0.3 se # Then we use those values within the call to loadIsotopeData() consumer_with_McCutchan <- loadIsotopeData(BilagayMEC,                                             consumer = \"Bilagay\",                                            b1 = \"Pelagic_BL\",                                            b2 = \"Benthic_BL\",                                             group = \"Coquimbo\",                                            consumersColumn = \"FG\",                                            baselineColumn = \"FG\",                                            groupsColumn = \"Location\",                                            deltaN = TDF_values$deltaN,                                            deltaC = TDF_values$deltaC) # Here we explicitly include a label for both baseline 1 and baseline 2. # We could change the label for the consumer (consumer = \"new_label\"), or even  # change the position of the legend (legend = c(1.15, 1.15) is the default). plot(consumer, b1 = \"Pelagic baseline\", b2 = \"Benthic baseline\")"},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Short_guide_to_tRophicPosition.html","id":"the-bayesian-model","dir":"Articles","previous_headings":"Working with tRophicPosition","what":"The Bayesian Model","title":"Short guide to the use of tRophicPosition","text":"coded three Bayesian models tRophicPosition: one baseline (jagsOneBaseline()), two baselines, without TDF carbon (jagsTwoBaselines()) two baseline full model, includes TDF carbon (jagsTwoBaselinesFull()). model can defined using either functions mentioned, using new function jagsBayesianModel(), first introduced release 0.6.8 tRophicPosition. make full use Bayesian approach coded tRophicPosition, user can change priors parameters different models, constants (e.g. lambda). define one baseline model: function jagsBayesianModel() receives arguments model variable (three options: “oneBaseline”, “twoBaselines” “twoBaselinesFull”), optionally receives distribution parameters. argument received, default function returns two baselines full model. example defined also normal distribution mean 4 SD 0.1 priors parameter TP, trophic position. pretty confident (given stomach contents) fish TP = 4. functions define Bayesian model, default return lambda = 2 indicate trophic level baseline, case bivalve Perumytilus purpuratus (pelagic baseline). want change , simply add argument within call jagsBayesianModel() functions. next step initialize model, using function TPmodel(). two arguments needed data model.string, first stable isotope data second Bayesian model just defined . arguments optional. initializating phase needed samplers adapt parameters maximize efficiency. initialization takes place actual Markov Chain Monte Carlo sampling, done function posteriorTP(). example set 20,000 MCMC iterations sample posterior using model defined TPmodel(). Also defined monitor variables \"TP\" \"muDeltaN\" (default). TP trophic position, main parameter interest, also included muDeltaN mean Δ\\DeltaN.","code":"model.string <- jagsBayesianModel(model = \"oneBaseline\", TP = \"dnorm(4, 0.1)\") model <- TPmodel(data = consumer, model.string = model.string,                  n.adapt = 20000, n.chains = 2) ## Warning in rjags::jags.model(con, data = data, n.chains = n.chains, n.adapt = ## n.adapt, : Unused variable \"dCb1\" in data ## Warning in rjags::jags.model(con, data = data, n.chains = n.chains, n.adapt = ## n.adapt, : Unused variable \"dNb2\" in data ## Warning in rjags::jags.model(con, data = data, n.chains = n.chains, n.adapt = ## n.adapt, : Unused variable \"dCb2\" in data ## Warning in rjags::jags.model(con, data = data, n.chains = n.chains, n.adapt = ## n.adapt, : Unused variable \"deltaC\" in data ## Warning in rjags::jags.model(con, data = data, n.chains = n.chains, n.adapt = ## n.adapt, : Unused variable \"dCc\" in data ## Compiling model graph ##    Resolving undeclared variables ##    Allocating nodes ## Graph information: ##    Observed stochastic nodes: 81 ##    Unobserved stochastic nodes: 16 ##    Total graph size: 110 ##  ## Initializing model posterior.samples <- posteriorTP(model = model, n.iter = 20000,                                  variable.names = c(\"TP\", \"muDeltaN\"))"},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Short_guide_to_tRophicPosition.html","id":"analyzing-and-plotting-the-posterior-estimation-of-trophic-position","dir":"Articles","previous_headings":"Working with tRophicPosition","what":"Analyzing and plotting the posterior estimation of trophic position","title":"Short guide to the use of tRophicPosition","text":"everything went well, calculated trophic position Bayesian inference. function posteriorTP() returns object class “mcmc.list”, can use generic method summary coda package: coda package provided useful summary statistics, researchers feel best practice describing central tendency posterior distributions use mode. use function getPosteriorMode() estimate : order graphically depict results can use generic plot function coda package (plot(posterior.samples)), even use R packages process/display information posterior samples, MCMCtrace() MCMCplot() functions package MCMCvis.  plot (plot(posterior.samples)) visualizes trace density MCMC chains parameters interest, case TP (trophic position) muDeltaN (mean TDF nitrogen). gives us quick way visualize posterior sampling converged: tendency increase decrease time (chains trace plot well mixed) density parameters smooth unimodal (given assumptions one baseline Bayesian model particular case). plot (plotTP(), wrapper SIBER) visualizes posterior distributions TP muDeltaN. gives graphical summary mode 95, 75 50 percent credible intervals posterior distribution (see ?SIBER::siberDensityPlot details).  dealing one species, one Bayesian model (one species) use function credibilityIntervals(). covered rest vignettes.","code":"summary(posterior.samples) ##  ## Iterations = 20010:40000 ## Thinning interval = 10  ## Number of chains = 2  ## Sample size per chain = 2000  ##  ## 1. Empirical mean and standard deviation for each variable, ##    plus standard error of the mean: ##  ##           Mean     SD Naive SE Time-series SE ## TP       3.720 0.1108 0.001751       0.001826 ## muDeltaN 3.393 0.1343 0.002123       0.002085 ##  ## 2. Quantiles for each variable: ##  ##           2.5%   25%   50%   75% 97.5% ## TP       3.505 3.647 3.718 3.789 3.946 ## muDeltaN 3.124 3.306 3.394 3.481 3.661 # First we combine both chains (if we sample them) posterior.combined <- coda::mcmc(do.call(rbind, posterior.samples))  # Then we calculate the mode with this code getPosteriorMode(posterior.combined) ##       TP muDeltaN  ##     3.68     3.44 plot(posterior.samples) # First we combine the 2 chains combined <- as.data.frame(coda::mcmc(do.call(rbind, posterior.samples)))  # Then we plot the data using a wrapper of SIBER::siberDensityPlot() plotTP(combined, xlab = \"Monitored variables\")"},{"path":"https://benjaminhlina.github.io/tRophicPosition/articles/Short_guide_to_tRophicPosition.html","id":"further-use-of-trophicposition","dir":"Articles","previous_headings":"","what":"Further use of tRophicPosition","title":"Short guide to the use of tRophicPosition","text":"aim building package make useful possible. , coded number complex (informative) functions users want take full advantage tRophicPosition. functions includes multiple models compare different means calculating TP (multiModelTP()), automatic comparisons multiple species e.g. community based comparisons, comparisons single species across multiple locations (multiSpeciesTP()), pairwise comparison two (compareTwoDistributions()) multiple posterior estimations (pairwiseComparisons()), non-Bayesian version trophic position (parametricTP()), parsing multiple species communities data frame (loadIsotopeData() extractIsotopeData()), screening food webs one species (screenFoodWeb()). functions described number vignettes included within package. access , simply use following code:","code":"browseVignettes(\"tRophicPosition\")"},{"path":"https://benjaminhlina.github.io/tRophicPosition/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Claudio Quezada-Romegialli. Maintainer.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Quezada-Romegialli C, Jackson AL, Harrod C (2024). tRophicPosition: Bayesian Trophic Position Estimation Stable Isotopes. R package version 0.8.0, https://benjaminhlina.github.io/tRophicPosition/, https://github.com/clquezada/tRophicPosition.","code":"@Manual{,   title = {tRophicPosition: Bayesian Trophic Position Estimation with Stable Isotopes},   author = {Claudio Quezada-Romegialli and Andrew L Jackson and Chris Harrod},   year = {2024},   note = {R package version 0.8.0, https://benjaminhlina.github.io/tRophicPosition/},   url = {https://github.com/clquezada/tRophicPosition}, }"},{"path":"https://benjaminhlina.github.io/tRophicPosition/index.html","id":"trophicposition","dir":"","previous_headings":"","what":"Bayesian Trophic Position Estimation with Stable Isotopes","title":"Bayesian Trophic Position Estimation with Stable Isotopes","text":"tRophicPosition colaborative project Chris Harrod, Andrew L. Jackson, Claudio Quezada-Romegialli others. consists R package incorporating Bayesian model calculation consumer trophic position using stable isotopes one two baselines. uses powerful approach Markov Chain Monte Carlo simulations provided JAGS statistical language R. 12th December 2022, releasing version 0.8.0 package, fifth release version. find error, please send trophicposition-support@googlegroups.com /raise issue GitHub page. Also can also send direct email clquezada harrodlab.net. interested joining tRophicPosition support group, https://groups.google.com/d/forum/trophicposition-support","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/index.html","id":"news-11-december-2022","dir":"","previous_headings":"","what":"NEWS (11 December 2022)","title":"Bayesian Trophic Position Estimation with Stable Isotopes","text":"Small updates back CRAN. working major release. Come back soon.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/index.html","id":"news-05-april-2019","dir":"","previous_headings":"","what":"NEWS (05 April 2019)","title":"Bayesian Trophic Position Estimation with Stable Isotopes","text":"Updating CRAN release v 0.7.7 (archived recently). Small fix regarding examples.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/index.html","id":"news-27-june-2018","dir":"","previous_headings":"","what":"NEWS (27 June 2018)","title":"Bayesian Trophic Position Estimation with Stable Isotopes","text":"Fixed issue 69 (parametricTP() using one baseline). small fix changes current version tRophicPosition 0.7.6 GitHub. CRAN version updated soon.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/index.html","id":"news-29-january-2018","dir":"","previous_headings":"","what":"NEWS (29 January 2018)","title":"Bayesian Trophic Position Estimation with Stable Isotopes","text":"Added function extractPredictiveData() perform posterior predictive model-checking procedure. Implemented code coverage unit test. Improved code (make clearer, considering width assignment operator). Changed arguments (consumer instead species, group instead community others) loadIsotopeData(), extractIsotopeData() functions (maintaining old arguments compatibility) Added procedure checking errors priors arguments jagsBayesianModel related functions Removed MCMCvis Short guide tRophicPosition vignette, package longer CRAN.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/index.html","id":"news-12-october-2017","dir":"","previous_headings":"","what":"NEWS (12 October 2017)","title":"Bayesian Trophic Position Estimation with Stable Isotopes","text":"Added function fromParallelTP() extract data parallel calculations (see examples GitHub). Implemented Bhattacharrya Coefficient (package dispRity) comparing two posterior distributions. dispRity available GitHub, users installed package use internal function bhat.coeff based dispRity package. Improved credibilityIntervals(). Now can group samples colour, accept manual colours legend position. Added two example datasets: Inari Kilpis (Finnish_Lakes), Roach, including examples GitHub page.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bayesian Trophic Position Estimation with Stable Isotopes","text":"stable version tRophicPosition hosted CRAN, installed like package: {r} install.packages(\"tRophicPosition\") Remember install JAGS platform well. number packages needed, can installed : {r} install.packages(c(\"coda\", \"data.table\", \"dplyr\", \"ggplot2\", \"gridExtra\", \"hdrcde\", \"MCMCglmm\", \"plyr\", \"rjags\", \"knitr\", \"rmarkdown\")) development version tRophicPosition must installed GitHub. , install package devtools, use function install_github(): {r} install.packages(\"devtools\") devtools::install_github(\"clquezada/tRophicPosition\", build_vignettes = TRUE) see vignettes prepared describe use package: {r} browseVignettes(\"tRophicPosition\")","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/index.html","id":"online-vignettes","dir":"","previous_headings":"","what":"Online vignettes","title":"Bayesian Trophic Position Estimation with Stable Isotopes","text":"Can found GitHub .","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/index.html","id":"credits","dir":"","previous_headings":"","what":"Credits","title":"Bayesian Trophic Position Estimation with Stable Isotopes","text":"tRophicPosition relies code coda dispRity. moment dispRity available GitHub, included Suggests. tRophicPosition included Bhattacharrya Coefficient (bhatt.coeff function dispRity) plotMCMC (coda) convenience.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Bayesian Trophic Position Estimation with Stable Isotopes","text":"citing tRophicPosition publications, please cite paper describing method package version used analyse data: Claudio Quezada-Romegialli, Andrew L Jackson, Brian Hayden, Kimmo K Kahilainen, Christelle Lopes Chris Harrod (2018). tRophicPosition , R package Bayesian estimation trophic position consumer stable isotope ratios. Methods Ecology Evolution, 9(6):1592-1599. doi:[10.1111/2041-210X.13009](https://doi.org/10.1111/2041-210X.13009) Claudio Quezada-Romegialli, Andrew L Jackson, Brian Hayden, Kimmo K Kahilainen, Christelle Lopes Chris Harrod (2018). tRophicPosition: Bayesian Trophic Position Calculation Stable Isotopes. R package version 0.7.5. https://cran.r-project.org/package=tRophicPosition doi:[10.5281/zenodo.1161826](https://doi.org/10.5281/zenodo.1161826) previous releases please use corresponding version doi citing: v0.7.5 (29 January 2018) 10.5281/zenodo.1161826 v0.7.3 (12 October 2017) 10.5281/zenodo.1009571 v0.7.0 (12 June 2017) 10.5281/zenodo.806048","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/index.html","id":"future-releases-and-how-to-get-support","dir":"","previous_headings":"","what":"Future releases and how to get support","title":"Bayesian Trophic Position Estimation with Stable Isotopes","text":"encouraged use tRophicPosition data, test package see issues problems. can send questions commentaries google group tRophicPosition-support directly email trophicposition-support googlegroups.com. can send questions http://stackexchange.com/ http://stackoverflow.com/ even Facebook (stable isotope ecology group). constantly working future releases tRophicPosition, feedback much appreciated.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/index.html","id":"to-do","dir":"","previous_headings":"","what":"To DO","title":"Bayesian Trophic Position Estimation with Stable Isotopes","text":"Things tRophicPosition","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/Bilagay.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame containing stable isotope values of Bilagay. — Bilagay","title":"Data frame containing stable isotope values of Bilagay. — Bilagay","text":"dataset containing stable isotope values (d13C d15N) Bilagay Cheilodactylus variegatus (http://www.fishbase.se/summary/Cheilodactylus-variegatus.html), fish common coastal kelp forests N Chile.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/Bilagay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame containing stable isotope values of Bilagay. — Bilagay","text":"","code":"data(\"Bilagay\")"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/Bilagay.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame containing stable isotope values of Bilagay. — Bilagay","text":"data frame 841 rows 7 variables: Study factor, character describing study funded data   collection Location factor, character describing samples   taken Spp factor, character describing scientific name   species FG factor, character describing functional group   species d13C numeric, stable isotope d13C values d15N numeric, stable isotope d15N values NS numeric, integer   describing north south ordering (1-10)","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/Finnish_Lakes.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame of food webs in Inari and Kilpis Lakes (Finland) — Finnish_Lakes","title":"Data frame of food webs in Inari and Kilpis Lakes (Finland) — Finnish_Lakes","text":"Dataset stable isotope values two relatively large deep oligotrophic Finnish lakes Inari Kilpis.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/Finnish_Lakes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame of food webs in Inari and Kilpis Lakes (Finland) — Finnish_Lakes","text":"","code":"data(\"Finnish_Lakes\")"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/Finnish_Lakes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame of food webs in Inari and Kilpis Lakes (Finland) — Finnish_Lakes","text":"data frame 7 variables: Lake factor, two levels, representing one Lake Species.group factor, 20 levels, representing one species d13C numeric, representing delta 13 C isotope values d15N numeric, representing delta 15 N isotope values C numeric, amount carbon N numeric, amount nitrogen C.N numeric, C/N ratio","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/Orestias.html","id":null,"dir":"Reference","previous_headings":"","what":"Named list containing stable isotope values of Orestias chungarensis — Orestias","title":"Named list containing stable isotope values of Orestias chungarensis — Orestias","text":"dataset containing stable isotope values (d13C d15N) killifish *Orestias chungarensis* (http://www.fishbase.se/summary/Orestias-chungarensis.html), endemic fish found Chungara Lake 4,500 meters sea level, Chilean Altiplano. Harrod, C. & . Vila unpublished results.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/Orestias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Named list containing stable isotope values of Orestias chungarensis — Orestias","text":"","code":"data(\"Orestias\")"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/Orestias.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Named list containing stable isotope values of Orestias chungarensis — Orestias","text":"named list 8 elements: dCc numeric, stable isotope values d13C Orestias   chungarensis dNc numeric, stable isotope values d15N Orestias   chungarensis dCb1 numeric, stable isotope values d13C baseline 1 dNb1 numeric, stable isotope values d15N baseline 1 dCb2 numeric, stable isotope values d13C baseline 2 dNb2 numeric, stable isotope values d15N baseline 2 deltaN numeric, trophic discrimination factor nitrogen deltaC numeric, trophic discrimination factor carbon","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/Roach.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame of Roach in Lough Neagh — Roach","title":"Data frame of Roach in Lough Neagh — Roach","text":"roach cyprinid freshwater-brackish benthopelagic fish, common Europe western Asia [http://www.fishbase.org/summary/Rutilus-rutilus.html] (http://www.fishbase.org/summary/Rutilus-rutilus.html). Larvae juveniles  typically pelagic, consuming zooplankton, switch benthic   diets grow, including plant material detritus. dataset   included examines consumer shows ontogenetic shift   trophic position, studying TP varies across different size classes.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/Roach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame of Roach in Lough Neagh — Roach","text":"","code":"data(\"Roach\")"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/Roach.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame of Roach in Lough Neagh — Roach","text":"data frame 6 variables: Taxon factor, 5 levels, common name baseline species   Roach FG factor, 3 levels, representing three functional groups:   Benthic_BL (bith, theodoxus valvata), Pelagic_BL (zebra mussel)   Roach (consumer) Fork.length numeric, fork length roach mm Size.class numeric, representing deciles fork length roach d13C numeric, stable isotope values d13C d15N numeric, stable isotope values d15N","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/TDF.html","id":null,"dir":"Reference","previous_headings":"","what":"Trophic discrimination factors from bibliography — TDF","title":"Trophic discrimination factors from bibliography — TDF","text":"function returns trophic discrimination factors (TDF), given author, element type. convenience 'type' includes number categories depending author. moment includes TDF data Post (2002) McCutchan et al (2003).","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/TDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trophic discrimination factors from bibliography — TDF","text":"","code":"TDF(author = \"Post\", element = \"both\", type = NULL, seed = 3)"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/TDF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trophic discrimination factors from bibliography — TDF","text":"author either \"Post\" \"McCutchan\" moment. element can \"\", \"N\" \"C\" type argument works \"McCutchan\" author (Table 3). \"\" returns TDF data; \"whole\" \"muscle\" returns TDF separated per type analysis; \"acidified\" \"unacidified\" returns TDF separated per acidification; \"Rainbow Trout\" \"Brook Trout\" returns TDF separated per fish species (according Table 1). seed integer replicated results","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/TDF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trophic discrimination factors from bibliography — TDF","text":"list (element = \"\") vector (element =\"N\" element   = \"C\") containing TDF values","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/TDF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trophic discrimination factors from bibliography — TDF","text":"","code":"TDF(author = \"McCutchan\", element = \"N\") #> You selected McCutchan's et al (2003) #>                   All d15N: 73 values with mean 2.3 +- 0.18 se #>  [1]  0.69289333  1.85201425  2.80664852  0.36355289  2.69755078  2.41070215 #>  [7]  2.50644677  4.29202048  0.24801350  4.55306819  1.06890517  0.39976559 #> [13]  1.11812154  2.79602392  2.62181724  1.82581450  0.70833209  1.23606806 #> [19]  4.47851562  2.70452686  1.35686025  0.72688854  2.00577270 -0.52706382 #> [25]  1.51967662  1.07532742  4.36821885  4.11099765  2.23373233  0.39013165 #> [31]  3.91802823  3.83343401  3.61862461  3.63383980  1.74880641  3.58018453 #> [37]  4.61019115  2.42477641  0.66285012  3.73298746  3.72042608  1.82095452 #> [43]  5.30026511  0.98265241  2.96188218 -1.56414172  2.07767218  4.31670352 #> [49]  1.56973458  0.80157846  3.61710729  0.95694357  2.82101511 -0.64963914 #> [55] -0.08542945  1.57318861  0.56552334  4.71717554  3.94717389  0.99901835 #> [61]  3.35162295  3.94845433  2.80231798  2.96799259  4.39197861  1.52592537 #> [67]  1.63331105  4.01237771  0.12654582  2.68095308  2.30429863  3.16734863 #> [73]  4.13200244"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/TEF.html","id":null,"dir":"Reference","previous_headings":"","what":"Trophic enrichment factors from bibliography — TEF","title":"Trophic enrichment factors from bibliography — TEF","text":"function returns trophic enrichment factors (TEF), given author, element type. convenience 'type' includes number categories depending author. moment includes TEF data Post (2002) McCutchan et al (2003). function maintained compatibility backwards version 0.6.8.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/TEF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trophic enrichment factors from bibliography — TEF","text":"","code":"TEF(author = \"Post\", element = \"both\", type = \"all\", seed = 3)"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/TEF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trophic enrichment factors from bibliography — TEF","text":"author either \"Post\" \"McCutchan\" moment. element can \"\", \"N\" \"C\" type argument works \"McCutchan\" author (Table 3). \"\" returns TEF data; \"whole\" \"muscle\" returns TEF separated per type analysis; \"acidified\" \"unacidified\" returns TEF separated per acidification; \"Rainbow Trout\" \"Brook Trout\" returns TEF separated per fish species (according Table 1). seed integer replicated results","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/TEF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trophic enrichment factors from bibliography — TEF","text":"list (element = \"\") vector (element =\"N\" element   = \"C\") containing TDF values","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/TEF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trophic enrichment factors from bibliography — TEF","text":"","code":"# TEF() is deprecated, use TDF() instead: TDF(author = \"McCutchan\", element = \"N\") #> You selected McCutchan's et al (2003) #>                   All d15N: 73 values with mean 2.3 +- 0.18 se #>  [1]  0.69289333  1.85201425  2.80664852  0.36355289  2.69755078  2.41070215 #>  [7]  2.50644677  4.29202048  0.24801350  4.55306819  1.06890517  0.39976559 #> [13]  1.11812154  2.79602392  2.62181724  1.82581450  0.70833209  1.23606806 #> [19]  4.47851562  2.70452686  1.35686025  0.72688854  2.00577270 -0.52706382 #> [25]  1.51967662  1.07532742  4.36821885  4.11099765  2.23373233  0.39013165 #> [31]  3.91802823  3.83343401  3.61862461  3.63383980  1.74880641  3.58018453 #> [37]  4.61019115  2.42477641  0.66285012  3.73298746  3.72042608  1.82095452 #> [43]  5.30026511  0.98265241  2.96188218 -1.56414172  2.07767218  4.31670352 #> [49]  1.56973458  0.80157846  3.61710729  0.95694357  2.82101511 -0.64963914 #> [55] -0.08542945  1.57318861  0.56552334  4.71717554  3.94717389  0.99901835 #> [61]  3.35162295  3.94845433  2.80231798  2.96799259  4.39197861  1.52592537 #> [67]  1.63331105  4.01237771  0.12654582  2.68095308  2.30429863  3.16734863 #> [73]  4.13200244"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/TPmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create a JAGS-based Bayesian model to calculate trophic position — TPmodel","title":"Function to create a JAGS-based Bayesian model to calculate trophic position — TPmodel","text":"function wrapper jags.model. receives isotopeData class object containing data, model string returned either jagsOneBaseline, jagsTwoBaselines, jagsTwoBaselinesFull jagsBayesianModel, creates JAGS model object.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/TPmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create a JAGS-based Bayesian model to calculate trophic position — TPmodel","text":"","code":"TPmodel(   data = NULL,   model.string = NULL,   n.chains = 2,   n.adapt = 10000,   quiet = FALSE,   ... )"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/TPmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create a JAGS-based Bayesian model to calculate trophic position — TPmodel","text":"data list containing data. model.string model string containing description model. n.chains number parallel chains model. n.adapt number iterations adaptation (initial sampling phase) quiet logical value indicate whether messages generated compilation suppressed, well progress bar adaptation. ... additional arguments passed jags.model.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/TPmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create a JAGS-based Bayesian model to calculate trophic position — TPmodel","text":"TPmodel returns object inheriting class jags can   used generate dependent samples posterior distribution   parameters","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/TPmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to create a JAGS-based Bayesian model to calculate trophic position — TPmodel","text":"","code":"if (FALSE) { # \\dontrun{ isotopeData <- generateTPData() model.string <- jagsBayesianModel() model <- TPmodel(data = isotopeData, model.string = model.string, n.adapt = 500) } # }"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/Trout.html","id":null,"dir":"Reference","previous_headings":"","what":"Named list containing stable isotope values of Oncorhynchus mykiss — Trout","title":"Named list containing stable isotope values of Oncorhynchus mykiss — Trout","text":"dataset containing stable isotope values (d13C d15N) invasive trout *Oncorhynchus mykiss* (www.fishbase.se/summary/oncorhynchus-mykiss.html), found Chungara Lake 4,500 meters sea level, Chilean Altiplano.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/Trout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Named list containing stable isotope values of Oncorhynchus mykiss — Trout","text":"","code":"data(\"Trout\")"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/Trout.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Named list containing stable isotope values of Oncorhynchus mykiss — Trout","text":"named list 8 elements: dCc numeric, stable isotope values d13C Oncorhynchus mykiss dNc numeric, stable isotope values d15N Oncorhynchus mykiss dCb1 numeric, stable isotope values d13C baseline 1 dNb1 numeric, stable isotope values d15N baseline 1 dCb2 numeric, stable isotope values d13C baseline 2 dNb2 numeric, stable isotope values d15N baseline 2 deltaN numeric, trophic discrimination factor nitrogen deltaC numeric, trophic discrimination factor carbon","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/compareTwoDistributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to compare two distributions and test a hypothesis, in a Bayesian context — compareTwoDistributions","title":"Function to compare two distributions and test a hypothesis, in a Bayesian context — compareTwoDistributions","text":"Function compare two distributions test hypothesis, Bayesian context","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/compareTwoDistributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to compare two distributions and test a hypothesis, in a Bayesian context — compareTwoDistributions","text":"","code":"compareTwoDistributions(   dist1 = NULL,   dist2 = NULL,   test = \"<=\",   sample = NULL,   round = 3,   ... )"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/compareTwoDistributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to compare two distributions and test a hypothesis, in a Bayesian context — compareTwoDistributions","text":"dist1 collection numerical values (posterior distribution). dist2 collection numerical values (posterior distribution). test logical operator states test . Might \"<\", \"<=\", \">\" \">=\". sample sample numeric, take 'sample' elements distributions. round integer indicate number decimals kept. ... extra arguments passed compareTwoDistributions().","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/compareTwoDistributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to compare two distributions and test a hypothesis, in a Bayesian context — compareTwoDistributions","text":"probability given sum(dist1 \"test\" dist2) / length(dist1)","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/compareTwoDistributions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to compare two distributions and test a hypothesis, in a Bayesian context — compareTwoDistributions","text":"","code":"a <- rnorm(100, 2, 0.1) b <- rnorm(100, 1.8, 0.1) compareTwoDistributions(a, b, test = \">=\") #> [1] 0.91 compareTwoDistributions(a, b, test = \"bhatt\") #> [1] 0.557"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/credibilityIntervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot credibility intervals and central tendency descriptor from posterior distributions of trophic position and/or alpha parameter — credibilityIntervals","title":"Plot credibility intervals and central tendency descriptor from posterior distributions of trophic position and/or alpha parameter — credibilityIntervals","text":"function plots data frame ggplot2 format (variables columns, observations rows), likely returned functions multiModelTP multiSpeciesTP. especially useful several species communities compare, combined plot preferred.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/credibilityIntervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot credibility intervals and central tendency descriptor from posterior distributions of trophic position and/or alpha parameter — credibilityIntervals","text":"","code":"credibilityIntervals(   df,   x = \"consumer\",   plotAlpha = TRUE,   legend = NULL,   legendAlpha = NULL,   y1 = \"mode\",   y1min = \"lower\",   y1max = \"upper\",   y1lim = NULL,   y2 = \"alpha.mode\",   y2min = \"alpha.lower\",   y2max = \"alpha.upper\",   xlab = \"Bayesian models\",   ylab1 = \"Posterior trophic position\",   ylab2 = \"Posterior alpha\",   group_by = NULL,   scale_colour_manual = NULL,   labels = NULL,   plot = TRUE,   ... )"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/credibilityIntervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot credibility intervals and central tendency descriptor from posterior distributions of trophic position and/or alpha parameter — credibilityIntervals","text":"df data frame least 4 columns, grouping variable, maximum, minimum central tendency descriptor (median, mode, etc.). x string defining grouping variable. plotAlpha logical. TRUE expects data frame least 7 columns, another descriptor central tendency, maximum minimum. legend list, position legend NULL, e.g. c(0.8, 0.8). legendAlpha list, position legend alpha plot, NULL, e.g. c(0.8, 0.8). y1 string column central tendency descriptor trophic position. default, mode. y1min lower value plotted trophic position. 95 credibility interval, value 0.025 percentile. y1max higher value plotted trophic position. 95 credibility interval, value 0.975 percentile. y1lim vector length 2, limits y axis trophic position. y2 string column central tendency descriptor alpha. y2min lower value plotted alpha. 95 value percentile 0.025. y2max higher value plotted alpha. 95 interval, value percentile 0.0975. xlab string label X axis. ylab1 string label Y1 axis (trophic position). ylab2 string label Y2 axis (alpha). group_by grouping variable (factor) case using colours. scale_colour_manual list colours (ggplot2 syntaxis) use group_by. labels string, manual labels x axis. plot logical, default TRUE. case saving output variable, user can decide plot output. ... additional parameters passed credibilityIntervals().","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/credibilityIntervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot credibility intervals and central tendency descriptor from posterior distributions of trophic position and/or alpha parameter — credibilityIntervals","text":"gtable (alpha plotted) two ggplot2 objects ggplot2   object (alpha plotted)","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/credibilityIntervals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot credibility intervals and central tendency descriptor from posterior distributions of trophic position and/or alpha parameter — credibilityIntervals","text":"","code":"isotopeData <- generateTPData() models <- multiModelTP(isotopeData, n.adapt = 200, n.iter = 200, burnin = 200) #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 106 #>    Unobserved stochastic nodes: 31 #>    Total graph size: 149 #>  #> Initializing model #>  #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 206 #>    Unobserved stochastic nodes: 14 #>    Total graph size: 243 #>  #> Initializing model #>  #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 313 #>    Unobserved stochastic nodes: 66 #>    Total graph size: 404 #>  #> Initializing model #>  credibilityIntervals(models$gg, x = \"model\") #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_pointrange()`)."},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/extractIsotopeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract stable isotope data from a data frame — extractIsotopeData","title":"Extract stable isotope data from a data frame — extractIsotopeData","text":"function generates list isotopeData class objects parsing data frame stable isotope values analysed one consumers one two baselines. data frame can organized one communities (sampling sites, samples time, multiple studies, etc.).","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/extractIsotopeData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract stable isotope data from a data frame — extractIsotopeData","text":"","code":"extractIsotopeData(   df = NULL,   b1 = \"Baseline 1\",   b2 = NULL,   baselineColumn = \"FG\",   consumersColumn = \"Spp\",   groupsColumn = NULL,   deltaC = NULL,   deltaN = NULL,   d13C = \"d13C\",   d15N = \"d15N\",   seed = 3,   ... )"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/extractIsotopeData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract stable isotope data from a data frame — extractIsotopeData","text":"df data frame containing raw isotope data, one grouping variables. b1 string vector text baseline 1. b2 string vector text baseline 2. baselineColumn string column baselines grouped. consumersColumn string column consumers/species grouped. groupsColumn string column groups/communities grouped. deltaC vector values trophic discrimination factor carbon. NULL use Post's assumptions (56 values 3.4 mean +- 0.98 sd). deltaN vector values trophic discrimination factor nitrogen. NULL use Post's assumptions (107 values 0.39 mean +- 1.3 sd). d13C string column d13C isotope values. d15N string column d15N isotope values. seed integer get reproducible results. default, seed = 3. ... Additional arguments passed funcion.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/extractIsotopeData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract stable isotope data from a data frame — extractIsotopeData","text":"list isotopeData class objects","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/extractIsotopeData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract stable isotope data from a data frame — extractIsotopeData","text":"","code":"data(\"Bilagay\") head(Bilagay) #>   Study Location                       Spp         FG  d13C d15N NS #> 1   MEL      CHI Echinolittorina peruviana Benthic_BL -10.1 16.3  4 #> 2   MEL      CHI Echinolittorina peruviana Benthic_BL -11.7 16.3  4 #> 3   MEL      CHI Echinolittorina peruviana Benthic_BL  -9.8 16.4  4 #> 4   MEL      CHI Echinolittorina peruviana Benthic_BL -11.0 16.6  4 #> 5   MEL      CHI Echinolittorina peruviana Benthic_BL  -7.4 12.5  4 #> 6   MEL      CHI Echinolittorina peruviana Benthic_BL -10.1 14.2  4 isotopeList <- extractIsotopeData(Bilagay, b1 = \"Benthic_BL\", b2 = \"Pelagic_BL\", baselineColumn = \"FG\", consumersColumn = \"Spp\", groupsColumn = \"Location\", d13C = \"d13C\", d15N = \"d15N\")"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/extractPredictiveData.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to extract raw data from posterior predictive model-checking distributions — extractPredictiveData","title":"Function to extract raw data from posterior predictive model-checking distributions — extractPredictiveData","text":"function parses data frame stored predicted data generated function TPmodel, returns list predictive posterior data monitored.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/extractPredictiveData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to extract raw data from posterior predictive model-checking distributions — extractPredictiveData","text":"","code":"extractPredictiveData(df = NULL, get = NULL, all = FALSE)"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/extractPredictiveData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to extract raw data from posterior predictive model-checking distributions — extractPredictiveData","text":"df data frame, variable saved output posterior predictive model-checking TPmodel run. get string, either \"dNcPred\" \"dCcPred\" (consumer data ), \"dNb1Pred\" \"dCb1Pred\" (baseline 1 data), \"dNb2Pred\" \"dNC2Pred\" (baseline 2 data). logical, TRUE return combined list monitored data.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/extractPredictiveData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to extract raw data from posterior predictive model-checking distributions — extractPredictiveData","text":"list data generated posterior predictive model-checking procedure, TRUE, vector returned instead.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/extractPredictiveData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to extract raw data from posterior predictive model-checking distributions — extractPredictiveData","text":"","code":"if (FALSE) { # \\dontrun{ # Generate isotope data isotopeData <- generateTPData(n.obsB = 45,                               sd.dNb1 = 1, sd.dCb1 = 1,                               dCb1 = -34, dCb2 = -24,                               n.obsC = 60, dCc = -29)  # Define a one baseline model model.string <- jagsOneBaseline()  # Initialize the model model_d <- TPmodel(data = isotopeData,                    model.string = model.string,                    n.chains = 2,                    n.adapt = 5000)  # Generate posterior samples of TP, alpha and dNcPred # dNcPred stands for the predicted data dNc (nitrogen values of consumer) samples_d <- posteriorTP(model_d,                          variable.names = c(\"TP\", \"alpha\", \"dNcPred\"),                          burnin = 5000,                          n.iter = 5000,                          thin = 10)  # Extract posterior predictive data dNcPred <- extractPredictiveData(samples_predicted, get = \"dNcPred\")  # Calculate residuals dNcPred_res <- sweep(dNcPred, 2, isotopeData$dNc, \"-\")  # Combine all residuals dNcPred_resall <- as.numeric(do.call(rbind, dNcPred_res))  # Plot a sample of them plot(sample(dNcPred_resall, 10000), xlab = \"Index\",      ylab = \"Residuals\")  # Extract posterior predictive data combined dNcPred_all <- extractPredictiveData(samples_predicted, get = \"dNcPred\",                                      all = TRUE)  # Plot a histogram of observed data and a density function of predicted data # We need ggplot2 installed previously ggplot2::ggplot() +   ggplot2::geom_histogram(ggplot2::aes(x = a$dNc, y = ..density..),                           binwidth = 0.3, fill = \"grey\", color = \"black\") +   ggplot2::geom_density(ggplot2::aes(x = dNcPred_all), color = \"blue\") +   ggplot2::xlab(expression(paste(delta^{15}, \"N (\\u2030)\"))) +   ggplot2::theme_bw() } # }"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/fromParallelTP.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to extract raw data from parallel calculations of trophic position — fromParallelTP","title":"Function to extract raw data from parallel calculations of trophic position — fromParallelTP","text":"function parses data frame stored data parallel calculations using multiModelTP list isotopeData class objects.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/fromParallelTP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to extract raw data from parallel calculations of trophic position — fromParallelTP","text":"","code":"fromParallelTP(df = NULL, get = NULL)"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/fromParallelTP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to extract raw data from parallel calculations of trophic position — fromParallelTP","text":"df data frame, variable saved output parallel calculations TP get string, either \"TP\", \"alpha\" \"summary.\" case TP function extract trophic position data, case alpha, function extract alpha parameter data, case summary, return data frame ready plot function credibilityIntervals.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/fromParallelTP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to extract raw data from parallel calculations of trophic position — fromParallelTP","text":"selecting \"TP\" \"alpha\", function returns posteriorTP posteriorAlpha object data. selecting \"summary\", function returns data frame ready used credibilityIntervals().","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/fromParallelTP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to extract raw data from parallel calculations of trophic position — fromParallelTP","text":"","code":"if (FALSE) { # \\dontrun{ data(\"Bilagay\") BilagayList <- extractIsotopeData(Bilagay, communityColumn = \"Location\",speciesColumn = \"FG\", b1 = \"Pelagic_BL\", b2 = \"Benthic_BL\", baselineColumn = \"FG\", deltaC = TDF(author = \"McCutchan\", element = \"C\", type = \"muscle\"), deltaN = TDF(author = \"McCutchan\", element = \"N\", type = \"muscle\")) Bilagay_TPmodels <- parallel::parLapply(cluster, BilagayList, multiModelTP, adapt = 20000, n.iter = 20000, burnin = 20000, n.chains = 5, model = \"twoBaselinesFull\") ggplot_df <- fromParallelTP(Bilagay_TPmodels, get = \"summary\") credibilityIntervals(ggplot_df, x = \"community\", xlab = \"Location along N-S gradient\") } # }"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/generateTPData.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to generate random stable isotope data for trophic position calculation — generateTPData","title":"A function to generate random stable isotope data for trophic position calculation — generateTPData","text":"function generates random stable isotope (d13C d15N) data use basic functions calculations coded within package.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/generateTPData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to generate random stable isotope data for trophic position calculation — generateTPData","text":"","code":"generateTPData(   n.baselines = 2,   n.obsB = 25,   dNb1 = NULL,   sd.dNb1 = 1,   dCb1 = NULL,   sd.dCb1 = 1,   dNb2 = NULL,   sd.dNb2 = 1,   dCb2 = NULL,   sd.dCb2 = 1,   n.obsC = 25,   consumer = NULL,   dNc = NULL,   sd.dNc = 1,   dCc = NULL,   sd.dCc = 1,   DeltaN = 3.4,   sd.DeltaN = 0.98,   n.obsDeltaN = 56,   DeltaC = 0.39,   sd.DeltaC = 1.3,   n.obsDeltaC = 107,   seed = 3 )"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/generateTPData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to generate random stable isotope data for trophic position calculation — generateTPData","text":"n.baselines number baselines (1 2), default 2. n.obsB number observations baselines. Default 25. dNb1 mean value d15N baseline 1. Default random number -5 5. sd.dNb1 standard deviation d15N baseline 1. dCb1 mean value d13C baseline 1. sd.dCb1 standard deviation d13C baseline 1. dNb2 mean value d15N baseline 2. sd.dNb2 standard deviation d15N baseline 2. dCb2 mean value d13C baseline 2. sd.dCb2 standard deviation d13C baseline 2. n.obsC number observations consumer. Default 25. consumer string consumer. dNc mean value d15N consumer. Default value dNb1 multiplied 2 times trophic discrimination factor. sd.dNc standard deviation d15N consumer. dCc mean value d13C consumer. sd.dCc standard deviation d13C consumer. DeltaN mean value trophic discrimination factor nitrogen. Default value 3.4. sd.DeltaN standard deviation trophic discrimination factor nitrogen. Default value 0.98. n.obsDeltaN number observations deltaN (trophic discrimination factor). Default value 56. DeltaC mean value trophic discrimination factor carbon. Default value 0.39. sd.DeltaC standard deviation trophic discrimination factor carbon. Default value 1.3. n.obsDeltaC number observations DeltaC (trophic discrimination factor). Default 107. seed numerical value get reproducible results.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/generateTPData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to generate random stable isotope data for trophic position calculation — generateTPData","text":"isotopeData class object (named list) dNb1, dNc deltaN  randomly generated observations. n.baselines = 2, dCb1, dNb2, dCb2,  dCc deltaC also returned.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/generateTPData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to generate random stable isotope data for trophic position calculation — generateTPData","text":"","code":"## Good data a <-generateTPData(dCb1 = -10, dNb1 = -10, dCc = -4, dNc = 4, dCb2 = 2, dNb2 = 0) plot(a)   ## Consumer more enriched in carbon b <-generateTPData(dCb1 = -10, dCc = 0, dCb2 = -2) plot(b)   ## Consumer much more enriched c <-generateTPData(dCb1 = -10, dCc = 3, dCb2 = -2) plot(c)"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/getPosteriorMode.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to get mode from a posterior distribution — getPosteriorMode","title":"Function to get mode from a posterior distribution — getPosteriorMode","text":"function wrapper hdr, returns one mode (receives vector), otherwise returns list modes (receives list vectors). receives mcmc object returns marginal parameter mode using Kernel density estimation (posterior.mode).","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/getPosteriorMode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to get mode from a posterior distribution — getPosteriorMode","text":"","code":"getPosteriorMode(df = NULL, round = 3)"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/getPosteriorMode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to get mode from a posterior distribution — getPosteriorMode","text":"df data frame, list vector posterior distribution(s). round numeric, number decimals rounded.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/getPosteriorMode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to get mode from a posterior distribution — getPosteriorMode","text":"vector list modes","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/getPosteriorMode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to get mode from a posterior distribution — getPosteriorMode","text":"","code":"# List example a <- list(\"First\" = rnorm(100,1), \"Second\" = rnorm(100,2)) getPosteriorMode(a) #>                First Second #> Posterior mode 0.856  1.994  # vector example getPosteriorMode(rnorm(100,5), round = 2) #> [1] 4.83"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/jagsBayesianModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a JAGS-based Bayesian model to use within tRophicPosition. — jagsBayesianModel","title":"Returns a JAGS-based Bayesian model to use within tRophicPosition. — jagsBayesianModel","text":"function returns string Bayesian model used trophic position calculations","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/jagsBayesianModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a JAGS-based Bayesian model to use within tRophicPosition. — jagsBayesianModel","text":"","code":"jagsBayesianModel(model = NULL, ...)"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/jagsBayesianModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a JAGS-based Bayesian model to use within tRophicPosition. — jagsBayesianModel","text":"model string. Can \"oneBaseline\", \"twoBaselines\" \"twoBaselinesFull\" moment. ... additional arguments passed jagsOneBaseline, jagsTwoBaselines jagsTwoBaselinesFull.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/jagsBayesianModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a JAGS-based Bayesian model to use within tRophicPosition. — jagsBayesianModel","text":"jags model character string","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/jagsBayesianModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a JAGS-based Bayesian model to use within tRophicPosition. — jagsBayesianModel","text":"","code":"# Example with priors for TP. # One baseline Bayesian model with prior for trophic position of consumer # defined as a normal distribution with mean 3 and sd 1 model.string <- jagsBayesianModel(model = \"oneBaseline\", TP = \"dnorm(3,1)\")  # Two baselines model with trophic level of baseline = 1 model.string <- jagsBayesianModel(model = \"twoBaselines\", lambda = 1)  # Two baselines full model with priors for alpha model.string <- jagsBayesianModel(model = \"twoBaselinesFull\", alpha = \"dbeta(10,1)\")"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/jagsOneBaseline.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines a jags Bayesian model to fit a single baseline trophic position model — jagsOneBaseline","title":"Defines a jags Bayesian model to fit a single baseline trophic position model — jagsOneBaseline","text":"function takes parameters returns jags model object character string passing jags.model.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/jagsOneBaseline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defines a jags Bayesian model to fit a single baseline trophic position model — jagsOneBaseline","text":"","code":"jagsOneBaseline(   muB = NULL,   sigmaB = NULL,   muDeltaN = NULL,   sigmaDeltaN = NULL,   sigma = NULL,   TP = NULL,   lambda = NULL,   ... )"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/jagsOneBaseline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defines a jags Bayesian model to fit a single baseline trophic position model — jagsOneBaseline","text":"muB distribution defining prior mean (mu) baseline. default dnorm(0, 0.0001). sigmaB distribution defining sigma (standard deviation) baseline. default dunif(0, 100). muDeltaN distribution defining prior mean (mu) deltaN. deltaN stands trophic discrimination factor Nitrogen. default dnorm(0, 0.0001). sigmaDeltaN distribution defining sigma (standard deviation) deltaN. default dunif(0, 100). sigma value defining sigma (standard deviation) baseline. default dunif(0, 100). TP distribution defining prior trophic position. default dunif(lambda, 10), lambda = 2 defined . lambda integer indicating trophic level baseline. Default 2. ... additional arguments passed jagsOneBaseline.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/jagsOneBaseline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defines a jags Bayesian model to fit a single baseline trophic position model — jagsOneBaseline","text":"jags model (BUGS-language) character string","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/jagsOneBaseline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Defines a jags Bayesian model to fit a single baseline trophic position model — jagsOneBaseline","text":"single baseline trophic position model defined : $$dNc = dNb + deltaN * (TP - lambda)$$ dNc d15N values consumer, dNb1 d15N values baseline, deltaN trophic discrimination factor N, TP trophic position consumer lambda trophic level baseline. Furthermore, Bayesian approach, dNb, deltaN dNc defined random parameters normal distribution mean mu_i precision tau_i, TP random parameter uniform distribution lambda constant. distributions can changed modifying priors, defining lambda within call function. Although possible use number predefined customized distributions (see distribution aliases JAGS documentation), likely time using normal distribution prior parameters. default option (.e. function called without arguments). change , need indicate mean standard deviation parameter interest, example \"dnorm(0, 0.0001)\". , prior normally distributed mu defined, mean 0, standard deviation 0.0001. constitutes normally distributed prior, although uninformative. might want change mean /standard deviation according prior knowledge system/consumer working . well priors mu, JAGS uses \"tau\", precision defining standard deviation mu. Precision deterministic function (instead distributional \"~\"), calculated \"tau <- power(sigma, -2)\", thus define well sigma_i, stands standard deviation parameter interest.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/jagsTwoBaselines.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines a jags Bayesian model to fit a two baselines trophic position model (without fractionation for C) — jagsTwoBaselines","title":"Defines a jags Bayesian model to fit a two baselines trophic position model (without fractionation for C) — jagsTwoBaselines","text":"Takes parameters returns jags model object character string passing jags.model.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/jagsTwoBaselines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defines a jags Bayesian model to fit a two baselines trophic position model (without fractionation for C) — jagsTwoBaselines","text":"","code":"jagsTwoBaselines(   sigmaNc = NULL,   sigmaCc = NULL,   muCb1 = NULL,   sigmaCb1 = NULL,   muNb1 = NULL,   sigmaNb1 = NULL,   muCb2 = NULL,   sigmaCb2 = NULL,   muNb2 = NULL,   sigmaNb2 = NULL,   lambda = NULL,   TP = NULL,   alpha = NULL,   muDeltaN = NULL,   sigmaDeltaN = NULL,   ... )"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/jagsTwoBaselines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defines a jags Bayesian model to fit a two baselines trophic position model (without fractionation for C) — jagsTwoBaselines","text":"sigmaNc distribution defining sigma (standard deviation) N consumer. Default dunif(0, 100). sigmaCc distribution defining sigma (standard deviation) C consumer. Default dunif(0, 100). muCb1 distribution defining prior mean (mu) C baseline 1. Default dnorm(0, 0.0001). sigmaCb1 distribution defining sigma (standard deviation) C baseline 1. Default dunif(0, 100). muNb1 distribution defining prior mean (mu) N baseline 1. dnorm(0, 0.0001) sigmaNb1 distribution defining sigma (standard deviation) N baseline 1. Default dunif(0, 100). muCb2 distribution defining prior mean (mu) C baseline 2. dnorm(0, 0.0001) sigmaCb2 distribution defining sigma (standard deviation) C baseline 2. Default dunif(0, 100). muNb2 distribution defining prior mean (mu) N baseline 2. dnorm(0, 0.0001) sigmaNb2 distribution defining sigma (standard deviation) N baseline 2. Default dunif(0, 100). lambda integer indicating trophic position baseline. Default 2. TP distribution defining prior trophic position. Default dunif(lambda, 10), lambda defined . alpha distribution defining alpha (mixing model 2 sources). Default dbeta(1,1). muDeltaN distribution defining prior mean (mu) deltaN, stands trophic discrimination factor Nitrogen. Default dnorm(0, 0.0001). sigmaDeltaN value defining sigma (standard deviation) mean (mu) deltaN. Default dunif(0, 100). ... additional arguments passed function.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/jagsTwoBaselines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defines a jags Bayesian model to fit a two baselines trophic position model (without fractionation for C) — jagsTwoBaselines","text":"jags model character string","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/jagsTwoBaselines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Defines a jags Bayesian model to fit a two baselines trophic position model (without fractionation for C) — jagsTwoBaselines","text":"two baselines trophic position model defined : $$dNc ~ dnorm(deltaN * (TP - lambda) + dNb1*alpha + dNb2 * (1 - alpha), tauNc)$$ $$dCc ~ dnorm(alpha * (dCb1 - dCb2) + dCb2, tauCc)$$ dNc dCc d15N d13C values consumer, dNb1 dCb1 d15N d13C values baseline 1, dNb2 dCb2 d15N d13C values baseline 2, alpha relative proportion N derived baseline 1, deltaN trophic discrimination factor N, TP trophic position consumer lambda trophic level baselines. Bayesian model, dNc dCc modelled normal distribution means calculated equations precision (tau) calculated standard deviation ^-2. Furthermore, dNb1, dCb1, dNb2, dCb2 deltaN defined random parameters normal distribution mean mu_i precision tau_i, TP random parameter uniform distribution, alpha random parameter beta distribution lambda constant. distributions can changed modifying priors, defining lambda within call function. might want change mean, standard deviation parameters distributions according prior knowledge system/consumer working . Although possible use number predefined customized distributions (see distribution aliases JAGS documentation), likely time using normal distribution prior parameters. default option (.e. function called without arguments). change , need indicate mean standard deviation -est parameter interest, example \"dnorm(0, 0.0001)\". , prior normally distributed mu_i defined, mean 0, standard deviation 0.0001. constitutes uninformative normally distributed prior, mean -est parameter.  well priors mu_i, JAGS uses \"tau\", precision defining standard deviation mu_i. Precision deterministic function (instead distributional \"~\"), calculated \"tau_i <- power(sigma_i, -2)\", thus define well sigma_i, stands standard deviation -est parameter interest. case alpha, default beta distribution parameters = 1 b = 1.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/jagsTwoBaselinesFull.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines a jags Bayesian model to fit a two baselines trophic position full model (with fractionation for C) — jagsTwoBaselinesFull","title":"Defines a jags Bayesian model to fit a two baselines trophic position full model (with fractionation for C) — jagsTwoBaselinesFull","text":"Takes parameters returns jags model object character string passing jags.model.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/jagsTwoBaselinesFull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defines a jags Bayesian model to fit a two baselines trophic position full model (with fractionation for C) — jagsTwoBaselinesFull","text":"","code":"jagsTwoBaselinesFull(   sigmaNc = NULL,   sigmaCc = NULL,   muCb1 = NULL,   sigmaCb1 = NULL,   muNb1 = NULL,   sigmaNb1 = NULL,   muCb2 = NULL,   sigmaCb2 = NULL,   muNb2 = NULL,   sigmaNb2 = NULL,   lambda = NULL,   TP = NULL,   alpha = NULL,   muDeltaN = NULL,   sigmaDeltaN = NULL,   muDeltaC = NULL,   sigmaDeltaC = NULL,   ... )"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/jagsTwoBaselinesFull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defines a jags Bayesian model to fit a two baselines trophic position full model (with fractionation for C) — jagsTwoBaselinesFull","text":"sigmaNc distribution defining sigma (standard deviation) N consumer. Default dunif(0, 100). sigmaCc distribution defining sigma (standard deviation) C consumer. Default dunif(0, 100). muCb1 distribution defining prior mean (mu) C baseline 1. Default dnorm(0, 0.0001). sigmaCb1 distribution defining sigma (standard deviation) C baseline 1. Default dunif(0, 100). muNb1 distribution defining prior mean (mu) N baseline 1. dnorm(0, 0.0001) sigmaNb1 distribution defining sigma (standard deviation) N baseline 1. Default dunif(0, 100). muCb2 distribution defining prior mean (mu) C baseline 2. dnorm(0, 0.0001) sigmaCb2 distribution defining sigma (standard deviation) C baseline 2. Default dunif(0, 100). muNb2 distribution defining prior mean (mu) N baseline 2. dnorm(0, 0.0001) sigmaNb2 distribution defining sigma (standard deviation) N baseline 2. Default dunif(0, 100). lambda integer indicating trophic position baseline. Default 2. TP distribution defining prior trophic position. Default dunif(lambda, 10), lambda defined . alpha distribution defining alpha (mixing model 2 sources). Default dbeta(1,1). muDeltaN distribution defining prior mean (mu) deltaN, stands trophic discrimination factor Nitrogen. Default dnorm(0, 0.0001). sigmaDeltaN value defining sigma (standard deviation) mean (mu) deltaN. Default dunif(0, 100). muDeltaC distribution defining prior mean (mu) deltaC, stands trophic discrimination factor Carbon sigmaDeltaC value defining sigma (standard deviation) mean (mu) deltaC. ... additional arguments passed function.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/jagsTwoBaselinesFull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defines a jags Bayesian model to fit a two baselines trophic position full model (with fractionation for C) — jagsTwoBaselinesFull","text":"jags model character string","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/jagsTwoBaselinesFull.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Defines a jags Bayesian model to fit a two baselines trophic position full model (with fractionation for C) — jagsTwoBaselinesFull","text":"two baselines trophic position full model defined : $$dNc ~ dnorm(deltaN * (TP - lambda) + dNb1*alpha + dNb2 * (1 - alpha), tauNc)$$ $$dCc ~ dnorm(dCb2 + (deltaC * (TP-lambda)) + (alpha * (dCb1 - dCb2)), tauCc))$$ dNc dCc d15N d13C values consumer, dNb1 dCb1 d15N d13C values baseline 1, dNb2 dCb2 d15N d13C values baseline 2, alpha relative proportion N derived baseline 1, deltaN trophic discrimination factor N, deltaC trophic discrimination factor C, TP trophic position consumer lambda trophic level baselines. Bayesian model, dNc dCc modelled normal distribution means calculated equations precision (tauNc tauCc) calculated standard deviation ^-2. Furthermore, dNb1, dCb1, dNb2, dCb2, deltaN deltaC defined random parameters normal distribution mean mu_i precision tau_i, TP random parameter uniform distribution, alpha random parameter beta distribution lambda constant. distributions can changed modifying priors, defining lambda within call function. might want change mean, standard deviation parameters distributions according prior knowledge system/consumer working . Although possible use number predefined customized distributions (see distribution aliases JAGS documentation), likely time using normal distribution prior parameters. default option (.e. function called without arguments). change , need indicate mean standard deviation -est parameter interest, example \"dnorm(0, 0.0001)\". , prior normally distributed mu_i defined, mean 0, standard deviation 0.0001. constitutes uninformative normally distributed prior, mean -est parameter.  well priors mu_i, JAGS uses \"tau\", precision defining standard deviation mu_i. Precision deterministic function (instead distributional \"~\"), calculated \"tau_i <- power(sigma_i, -2)\", thus define well sigma_i, stands standard deviation -est parameter interest. case alpha, default beta distribution parameters = 1 b = 1.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/loadIsotopeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and load stable isotope data for selected consumers from a data frame — loadIsotopeData","title":"Extract and load stable isotope data for selected consumers from a data frame — loadIsotopeData","text":"function extracts selected consumers/species respective baseline(s) returns isotopeData class object (list). useful lot information data frame want calculate trophic position selected consumers one communities.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/loadIsotopeData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and load stable isotope data for selected consumers from a data frame — loadIsotopeData","text":"","code":"loadIsotopeData(   df = NULL,   consumer = NULL,   group = NULL,   b1 = \"Baseline 1\",   b2 = NULL,   baselineColumn = \"FG\",   consumersColumn = \"FG\",   groupsColumn = NULL,   d13C = \"d13C\",   d15N = \"d15N\",   deltaC = NULL,   deltaN = NULL,   seed = 666,   ... )"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/loadIsotopeData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and load stable isotope data for selected consumers from a data frame — loadIsotopeData","text":"df data frame containing raw isotope data least one grouping column. consumer string character vector indicating consumer/species extracted. group string character vector indicating group(s) extracted. b1 string character vector indicating baseline(s) extracted baseline 1. b2 string character vector indicating baseline(s) extracted baseline 2. baselineColumn string column baselines grouped. consumersColumn string column species/consumer(s) grouped. groupsColumn string column groups/communities grouped. d13C string indicating column extract d13C isotope values. d15N string indicating column extract d15N isotope values. deltaC vector values trophic discrimination factor carbon. NULL use Post's assumptions (56 values 3.4 mean +- 0.98 sd). deltaN vector values trophic discrimination factor nitrogen. NULL use Post's assumptions (107 values 0.39 mean +- 1.3 sd). seed numerical value get reproducible results trophic discrimination factors (simulated time function called). default, 3. ... Additional arguments passed function.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/loadIsotopeData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract and load stable isotope data for selected consumers from a data frame — loadIsotopeData","text":"isotopeData class object one consumer one group   selected. list isotopeData class objects one consumer   one group selected.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/loadIsotopeData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract and load stable isotope data for selected consumers from a data frame — loadIsotopeData","text":"","code":"data(\"Bilagay\") head(Bilagay) #>   Study Location                       Spp         FG  d13C d15N NS #> 1   MEL      CHI Echinolittorina peruviana Benthic_BL -10.1 16.3  4 #> 2   MEL      CHI Echinolittorina peruviana Benthic_BL -11.7 16.3  4 #> 3   MEL      CHI Echinolittorina peruviana Benthic_BL  -9.8 16.4  4 #> 4   MEL      CHI Echinolittorina peruviana Benthic_BL -11.0 16.6  4 #> 5   MEL      CHI Echinolittorina peruviana Benthic_BL  -7.4 12.5  4 #> 6   MEL      CHI Echinolittorina peruviana Benthic_BL -10.1 14.2  4 loadIsotopeData(df = Bilagay, consumer = \"Bilagay\", consumersColumn = \"FG\", group = c(\"CHI\", \"COL\"), groupsColumn = \"Location\", b1 = \"Benthic_BL\", b2 = \"Pelagic_BL\", baselineColumn = \"FG\") #> $`CHI-Bilagay` #> $dNb1 #>  [1] 16.3 16.3 16.4 16.6 12.5 14.2 16.2 16.9 15.2 16.3 17.0 17.5 13.5 14.6 15.7 #> [16] 15.7 16.4 16.6 15.9 16.0 16.1 17.5 17.6 17.6 18.2 17.5 18.0 18.1 18.4 #>  #> $dCb1 #>  [1] -10.1 -11.7  -9.8 -11.0  -7.4 -10.1 -10.9 -11.8  -8.7 -10.0 -12.1 -12.2 #> [13]  -8.5 -10.1  -6.5  -8.0 -14.6 -14.3 -11.4  -6.3  -9.1 -10.4 -10.8 -10.9 #> [25]  -8.0 -11.9 -12.4  -9.9 -12.1 #>  #> $dNb2 #>  [1] 16.3 16.4 16.4 16.8 15.6 15.9 16.3 16.5 15.7 15.7 16.1 16.5 16.2 16.2 16.8 #> [16] 16.5 16.3 15.6 15.8 16.0 15.7 15.4 15.9 15.9 16.9 16.3 #>  #> $dCb2 #>  [1] -14.5 -14.5 -14.3 -14.4 -15.1 -15.0 -14.4 -14.5 -14.8 -14.6 -14.7 -14.8 #> [13] -16.3 -15.1 -14.7 -14.9 -14.7 -14.6 -15.6 -14.6 -15.0 -14.8 -15.8 -16.0 #> [25] -15.2 -15.5 #>  #> $deltaN #>  [1] 4.145940 5.274408 3.154027 5.286769 1.488014 4.150490 2.302961 2.753676 #>  [9] 1.868005 3.434212 5.395831 1.887701 4.245577 1.932512 3.591850 3.403970 #> [17] 4.239891 3.780466 2.950607 4.175344 2.852487 2.413157 4.607280 3.192133 #> [25] 3.499183 2.145384 2.463623 1.893417 2.520921 2.270017 4.147448 2.897777 #> [33] 4.752501 2.912934 3.676746 3.707337 3.855919 2.143643 3.632909 5.316203 #> [41] 4.121143 3.034473 3.038600 5.123389 3.933071 2.474237 3.194283 3.553644 #> [49] 4.048405 3.807253 3.648585 4.529300 2.844831 2.928922 3.019297 2.737296 #>  #> $deltaC #>   [1]  1.41949496  2.98997741  0.03905562  3.00718011 -2.27952397  1.42582789 #>   [7] -1.14536701 -0.51811025 -1.75069243  0.42898757  3.15896090 -1.72328155 #>  [13]  1.55815909 -1.66091906  0.64837193  0.38690096  1.55024711  0.91086716 #>  [19] -0.24404267  1.46041741 -0.38059470 -0.99200838  2.06153935  0.09208766 #>  [25]  0.51940701 -1.36466609 -0.92177489 -1.71532660 -0.84203380 -1.19121452 #>  [31]  1.42159357 -0.31756537  2.26364215 -0.29647084  0.76652039  0.80909467 #>  [37]  1.01587531 -1.36708863  0.70551348  3.04814387  1.38498611 -0.12732688 #>  [43] -0.12158237  2.77980521  1.12324716 -0.90700332  0.09507985  0.59520130 #>  [49]  1.28375595  0.94814663  0.72732998  1.95301552 -0.39124939 -0.27422118 #>  [55] -0.14844602 -0.54090568  0.18727280 -0.47724180  1.37800292  2.07536287 #>  [61] -0.75617803 -0.64709350 -1.16036777  2.89052068  1.32578179 -0.01990255 #>  [67]  0.71240732  0.97929380  2.52873827  0.40393477  0.08727896  0.29992536 #>  [73]  1.35759460  0.72005565 -1.04784671  0.39921068 -0.49738347 -3.18406996 #>  [79] -0.30034219 -0.20756533  2.33647162  1.58678372  0.07234983 -1.11692355 #>  [85]  0.46341966  1.73336500  0.98336403  2.26535549  0.65237642 -1.18935619 #>  [91] -0.12514745 -0.63946274  0.88045553  0.87329342 -0.81485288  0.96135980 #>  [97]  1.47459535 -0.20823681  0.70215697  0.53486693 -0.69855100 -1.78116678 #> [103]  2.95414402  1.49851761 -0.76360248  1.18014627 -0.49012864 #>  #> $dNc #>  [1] 21.6 21.7 22.0 21.6 21.8 21.9 22.0 21.3 22.3 21.7 21.9 22.2 21.5 22.4 22.4 #> [16] 22.5 22.3 22.1 #>  #> $dCc #>  [1] -13.6 -14.5 -13.8 -14.4 -14.4 -14.4 -14.4 -14.1 -14.5 -14.3 -14.3 -12.7 #> [13] -14.2 -14.2 -15.0 -14.1 -14.4 -11.9 #>  #> attr(,\"class\") #> [1] \"isotopeData\" #> attr(,\"consumer\") #> [1] \"Bilagay\" #> attr(,\"baseline1\") #> [1] \"Benthic_BL\" #> attr(,\"baseline2\") #> [1] \"Pelagic_BL\" #> attr(,\"group\") #> [1] \"CHI\" #>  #> $`COL-Bilagay` #> $dNb1 #>  [1] 15.7 16.8 17.0 17.1 17.4 17.5 18.4 18.5 13.7 15.9 16.3 17.1 15.4 16.0 16.2 #> [16] 16.2 16.0 16.3 16.4 17.4 17.9 18.1 18.2 18.3 18.3 18.5 18.6 18.6 17.3 17.1 #> [31] 17.1 17.1 17.6 17.1 17.4 17.4 17.1 17.3 17.2 17.5 17.6 17.4 #>  #> $dCb1 #>  [1]  -6.9  -8.8  -7.7  -8.5 -11.3 -12.8  -9.8  -9.2  -8.6 -11.2 -12.4 -10.0 #> [13]  -6.7 -10.3 -10.8  -9.3  -9.0  -7.7  -7.2  -7.0 -11.7 -11.9 -12.6 -11.4 #> [25] -14.1 -14.1 -13.6 -14.0 -12.5 -13.0 -12.7 -11.7 -13.3 -11.9 -11.7 -12.1 #> [37] -11.4 -13.7 -14.2 -14.2 -12.4 -13.7 #>  #> $dNb2 #>  [1] 15.5 15.9 16.1 16.3 16.5 16.5 16.9 17.1 15.6 16.1 16.4 17.1 15.2 15.1 14.9 #> [16] 15.0 15.8 16.8 15.7 16.5 16.5 15.5 16.7 16.6 16.2 16.2 16.4 15.3 16.8 16.8 #> [31] 16.8 16.2 #>  #> $dCb2 #>  [1] -15.2 -14.5 -14.9 -14.5 -14.0 -15.0 -14.9 -14.0 -15.0 -15.0 -14.6 -14.4 #> [13] -14.3 -13.9 -14.5 -14.4 -13.5 -14.9 -15.9 -15.2 -15.0 -15.3 -16.7 -15.4 #> [25] -15.3 -15.4 -14.8 -16.7 -14.1 -14.3 -14.1 -14.9 #>  #> $deltaN #>  [1] 4.145940 5.274408 3.154027 5.286769 1.488014 4.150490 2.302961 2.753676 #>  [9] 1.868005 3.434212 5.395831 1.887701 4.245577 1.932512 3.591850 3.403970 #> [17] 4.239891 3.780466 2.950607 4.175344 2.852487 2.413157 4.607280 3.192133 #> [25] 3.499183 2.145384 2.463623 1.893417 2.520921 2.270017 4.147448 2.897777 #> [33] 4.752501 2.912934 3.676746 3.707337 3.855919 2.143643 3.632909 5.316203 #> [41] 4.121143 3.034473 3.038600 5.123389 3.933071 2.474237 3.194283 3.553644 #> [49] 4.048405 3.807253 3.648585 4.529300 2.844831 2.928922 3.019297 2.737296 #>  #> $deltaC #>   [1]  1.41949496  2.98997741  0.03905562  3.00718011 -2.27952397  1.42582789 #>   [7] -1.14536701 -0.51811025 -1.75069243  0.42898757  3.15896090 -1.72328155 #>  [13]  1.55815909 -1.66091906  0.64837193  0.38690096  1.55024711  0.91086716 #>  [19] -0.24404267  1.46041741 -0.38059470 -0.99200838  2.06153935  0.09208766 #>  [25]  0.51940701 -1.36466609 -0.92177489 -1.71532660 -0.84203380 -1.19121452 #>  [31]  1.42159357 -0.31756537  2.26364215 -0.29647084  0.76652039  0.80909467 #>  [37]  1.01587531 -1.36708863  0.70551348  3.04814387  1.38498611 -0.12732688 #>  [43] -0.12158237  2.77980521  1.12324716 -0.90700332  0.09507985  0.59520130 #>  [49]  1.28375595  0.94814663  0.72732998  1.95301552 -0.39124939 -0.27422118 #>  [55] -0.14844602 -0.54090568  0.18727280 -0.47724180  1.37800292  2.07536287 #>  [61] -0.75617803 -0.64709350 -1.16036777  2.89052068  1.32578179 -0.01990255 #>  [67]  0.71240732  0.97929380  2.52873827  0.40393477  0.08727896  0.29992536 #>  [73]  1.35759460  0.72005565 -1.04784671  0.39921068 -0.49738347 -3.18406996 #>  [79] -0.30034219 -0.20756533  2.33647162  1.58678372  0.07234983 -1.11692355 #>  [85]  0.46341966  1.73336500  0.98336403  2.26535549  0.65237642 -1.18935619 #>  [91] -0.12514745 -0.63946274  0.88045553  0.87329342 -0.81485288  0.96135980 #>  [97]  1.47459535 -0.20823681  0.70215697  0.53486693 -0.69855100 -1.78116678 #> [103]  2.95414402  1.49851761 -0.76360248  1.18014627 -0.49012864 #>  #> $dNc #>  [1] 21.2 21.6 21.3 21.1 20.8 21.1 21.0 21.4 21.7 21.3 21.5 21.8 21.0 21.2 20.9 #> [16] 21.3 21.6 22.0 20.8 21.3 21.8 21.5 21.0 21.2 21.1 22.1 21.5 21.0 21.1 21.3 #> [31] 21.3 20.5 20.8 21.4 21.1 19.9 20.9 21.2 20.5 21.0 21.0 21.0 #>  #> $dCc #>  [1] -15.5 -15.6 -14.8 -15.1 -15.0 -15.2 -15.3 -15.0 -15.0 -14.9 -14.2 -14.8 #> [13] -15.7 -15.2 -15.2 -15.4 -15.2 -15.0 -15.2 -15.6 -15.0 -15.3 -15.0 -15.1 #> [25] -14.5 -15.1 -15.8 -13.1 -13.1 -13.3 -12.8 -13.2 -14.5 -13.5 -14.0 -13.2 #> [37] -15.6 -13.1 -14.1 -13.2 -13.8 -12.4 #>  #> attr(,\"class\") #> [1] \"isotopeData\" #> attr(,\"consumer\") #> [1] \"Bilagay\" #> attr(,\"baseline1\") #> [1] \"Benthic_BL\" #> attr(,\"baseline2\") #> [1] \"Pelagic_BL\" #> attr(,\"group\") #> [1] \"COL\" #>"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/multiModelTP.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple model calculation of trophic position — multiModelTP","title":"Multiple model calculation of trophic position — multiModelTP","text":"function takes isotopeData class object calculates default three Bayesian models: one two baselines without carbon fractionation two baselines carbon fractionation. function takes isotopeData class object calculates default three Bayesian models: one two baselines without carbon fractionation two baselines carbon fractionation.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/multiModelTP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple model calculation of trophic position — multiModelTP","text":"","code":"multiModelTP(   siData = siData,   lambda = 2,   n.chains = 2,   n.adapt = 20000,   n.iter = 20000,   burnin = 20000,   thin = 10,   models = c(\"oneBaseline\", \"twoBaselines\", \"twoBaselinesFull\"),   params = NULL,   print = FALSE,   quiet = FALSE,   ... )  multiModelTP(   siData = siData,   lambda = 2,   n.chains = 2,   n.adapt = 20000,   n.iter = 20000,   burnin = 20000,   thin = 10,   models = c(\"oneBaseline\", \"twoBaselines\", \"twoBaselinesFull\"),   params = NULL,   print = FALSE,   quiet = FALSE,   ... )"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/multiModelTP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple model calculation of trophic position — multiModelTP","text":"siData isotopeData class object. lambda numerical value, represents trophic level baseline(s). n.chains number parallel chains model. convergence diagnostics (Gelman-Rubin) printed, n.chains needs >= 2. n.adapt number adaptive iterations, actual sampling. n.iter number iterations Bayesian modelling (posterior sampling). burnin number iterations discarded burn . thin thinning. Number samples discarded performing posterior sampling. models string list representing Bayesian models. moment can \"oneBaseline\", \"twoBaselines\" /\"twoBaselinesFull\". params aditional parameters included list. print logical value indicate whether Gelman Rubin's convergence diagnostic summary samples printed. quiet logical value indicate whether messages generated compilation suppressed, well progress bar adaptation. ... additional arguments passed function.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/multiModelTP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple model calculation of trophic position — multiModelTP","text":"model calculated, returns data frame 4 elements   raw posterior samples, list posterior TP samples, list   posterior muDeltaN (one baseline model chosen) alpha (two   baselines model chosen) data frame summary posterior   samples named gg. model calculated, returns data frame 4 elements   raw posterior samples, list posterior TP samples, list   posterior muDeltaN (one baseline model chosen) alpha (two   baselines model chosen) data frame summary posterior   samples named gg.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/multiModelTP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiple model calculation of trophic position — multiModelTP","text":"","code":"if (FALSE) { # \\dontrun{ isotopeData <- generateTPData() models <- multiModelTP(isotopeData, n.adapt = 500, n.iter = 500, burnin = 500) credibilityIntervals(models$gg, x = \"model\") } # } if (FALSE) { # \\dontrun{ isotopeData <- generateTPData() models <- multiModelTP(isotopeData, n.adapt = 500, n.iter = 500, burnin = 500) credibilityIntervals(models$gg, x = \"model\") } # }"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/multiSpeciesTP.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple species calculation of trophic position — multiSpeciesTP","title":"Multiple species calculation of trophic position — multiSpeciesTP","text":"function takes named list isotopeData class objects calculates one Bayesian models trophic position element list.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/multiSpeciesTP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple species calculation of trophic position — multiSpeciesTP","text":"","code":"multiSpeciesTP(   siDataList = siDataList,   lambda = 2,   n.chains = 2,   n.adapt = 20000,   n.iter = 20000,   burnin = 20000,   thin = 10,   model = \"oneBaseline\",   print = FALSE,   quiet = FALSE,   ... )"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/multiSpeciesTP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple species calculation of trophic position — multiSpeciesTP","text":"siDataList named list isotopeData class objects. lambda numerical value, represents trophic level baseline(s). n.chains number parallel chains model. convergence diagnostics (Gelman-Rubin) printed, n.chains needs >= 2. n.adapt number adaptive iterations, actual sampling. n.iter number iterations Bayesian modelling (posterior sampling). burnin number iterations discarded burn . thin thinning. Number samples discarded performing posterior sampling. model string list representing Bayesian models. moment can \"oneBaseline\", \"twoBaselines\" /\"twoBaselinesFull\". print logical value indicate whether Gelman Rubin's convergence diagnostic summary samples printed. quiet logical value indicate whether messages generated compilation suppressed, well progress bar adaptation. ... additional arguments passed function.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/multiSpeciesTP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple species calculation of trophic position — multiSpeciesTP","text":"list 4 elements. output organised lists nested.   first element (multiSpeciesTP) gg data frame returned   multiModelTP, second element (df) data frame summary   information consumers models, third element (TPs)   raw posterior trophic position consumers models, last   element (Alphas) raw posterior muDeltaN (one baseline model   chosen) alpha (two baselines model chosen) consumers   models.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/multiSpeciesTP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiple species calculation of trophic position — multiSpeciesTP","text":"","code":"# \\donttest{ siDataList <- list(\"consumer1\" = generateTPData(consumer = \"consumer1\"), \"consumer2\" = generateTPData(consumer = \"consumer2\")) models <- multiSpeciesTP(siDataList, model = \"twoBaselines\", n.adapt = 500, n.iter = 500, burnin = 500) #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 206 #>    Unobserved stochastic nodes: 14 #>    Total graph size: 243 #>  #> Initializing model #>  #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 206 #>    Unobserved stochastic nodes: 14 #>    Total graph size: 243 #>  #> Initializing model #>  credibilityIntervals(models$df, x = \"consumer\")  # }"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/pairwiseComparisons.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to perform pairwise comparisons between two or more posterior distributions — pairwiseComparisons","title":"Function to perform pairwise comparisons between two or more posterior distributions — pairwiseComparisons","text":"Function compare two posterior distributions test hypothesis, Bayesian context","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/pairwiseComparisons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to perform pairwise comparisons between two or more posterior distributions — pairwiseComparisons","text":"","code":"pairwiseComparisons(df, test = \"<=\", print = FALSE)"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/pairwiseComparisons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to perform pairwise comparisons between two or more posterior distributions — pairwiseComparisons","text":"df data frame collection numerical values (posterior samples) compared. test string logical test used comparisons. Can <, <=, > >=. print logical value indicate whether output printed .","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/pairwiseComparisons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to perform pairwise comparisons between two or more posterior distributions — pairwiseComparisons","text":"symmetrical matrix probabilities given sum(dist1 >= dist2) / length(dist1) comparison.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/pairwiseComparisons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to perform pairwise comparisons between two or more posterior distributions — pairwiseComparisons","text":"","code":"a <- rnorm(100, 2, 0.1) b <- rnorm(100, 1.8, 0.1) c <- rnorm(100, 2.2, 0.1) pairwiseComparisons(list(\"a\" = a, \"b\" = b, \"c\" = c)) #>        [1]  [2] [3] #> [1] a 0.00 0.07 0.9 #> [2] b 0.93 0.00 1.0 #> [3] c 0.10 0.00 0.0"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/parametricTP.html","id":null,"dir":"Reference","previous_headings":"","what":"Parametric trophic position — parametricTP","title":"Parametric trophic position — parametricTP","text":"Calculation parametric trophic position (means) partially based Post (2002: Using Stable Isotopes Estimate Trophic Position: Models, Methods, Assumptions. Ecology 83, 703).","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/parametricTP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric trophic position — parametricTP","text":"","code":"parametricTP(siData, lambda = 2, print = TRUE)"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/parametricTP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric trophic position — parametricTP","text":"siData isotopeData class object. lambda numerical value representing trophic level baseline(s). print logical value indicate whether output printed .","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/parametricTP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parametric trophic position — parametricTP","text":"list parametric trophic position calculated one   baseline model, two baselines model alpha value, two   baselines full model alpha value.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/parametricTP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parametric trophic position — parametricTP","text":"case one baseline model, trophic position calculated $$TP = lambda + ((dNc - dNb1) / deltaN)$$ lambda trophic level baseline 1, dNc d15N values consumer, dNb1 d15N values baseline 1 deltaN trophic discrimination factor values N. case two baselines model, trophic position calculated $$TP = lambda + ((dNc - ((dNb1 * alpha) + (dNb2 * (1 - alpha)))) / deltaN)$$ $$alpha = (dCc - dCb2) / (dCb1 - dCb2)$$ Additional variables dCc (d13C values consumer), dNb2 (d15N values baseline 2), alpha (relative contribution N baseline 1), dCb1 dCb2 (d13C values baselines 1 2 respectively). case two baselines full model, trophic position calculated equation two baselines model, alpha calculated $$alpha = ((dCc - (deltaC * TP / lambda)) - dCb2) / (dCb1 - dCb2)$$ includes deltaC (trophic discrimination factor C). cases trophic position calculated based means isotope values trophic discrimination factors. two baselines full model, iteration needed get convergence trophic position, starting alpha calculated two baselines simple model. convergence gotten 50 iterations message plotted alpha trophic position printed.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/parametricTP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parametric trophic position — parametricTP","text":"","code":"consumer <- generateTPData() parametricTP(consumer) #> [1] \"***************************************\" #> [1] \"Parametric version of trophic position\" #> [1] \"For consumer:  \" #> [1] \"One baseline TP:  4\" #> [1] \"Two baselines TP:  4.65 0.304\" #> [1] \"Full model TP. At the beginning:  4.65 0.33\" #> [1] \"Convergence after  6  iterations. TP:  4.62  alpha:  0.33\" #> [[1]] #> [1] 4 #>  #> [[2]] #> [1] 4.646152 #>  #> [[3]] #> [1] 0.3042285 #>  #> [[4]] #> [1] 4.622406 #>  #> [[5]] #> [1] 0.3297974 #>"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/plot.isotopeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot stable isotope data (2 elements) with one or two baselines — plot.isotopeData","title":"Plot stable isotope data (2 elements) with one or two baselines — plot.isotopeData","text":"Plot stable isotope data (2 elements) one two baselines","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/plot.isotopeData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot stable isotope data (2 elements) with one or two baselines — plot.isotopeData","text":"","code":"# S3 method for class 'isotopeData' plot(   x,   consumer = NULL,   b1 = NULL,   b2 = NULL,   legend = c(1.15, 1.15),   density = \"both\",   xylim = NULL,   ... )"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/plot.isotopeData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot stable isotope data (2 elements) with one or two baselines — plot.isotopeData","text":"x isotopeData class object. consumer string representing consumer. b1 string representing baseline 1. b2 string representing baseline 2. legend coordinates representing locate legend. density string representing whether density function plotted. Accepted characters \"\" case function plot density function right, \"right\", \"\" \"none\". xylim argument modifying x-y limits (testing) ... additional arguments passed function.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/plot.isotopeData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot stable isotope data (2 elements) with one or two baselines — plot.isotopeData","text":"ggplot2 object biplot isotopes.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/plot.isotopeData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot stable isotope data (2 elements) with one or two baselines — plot.isotopeData","text":"","code":"a <- generateTPData() plot(a)"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/plotMCMC.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function that plot a mcmc.list object. — plotMCMC","title":"Internal function that plot a mcmc.list object. — plotMCMC","text":"intended used user.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/plotMCMC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function that plot a mcmc.list object. — plotMCMC","text":"","code":"plotMCMC(   x,   trace = TRUE,   density = TRUE,   smooth = TRUE,   bwf,   auto.layout = TRUE,   ask = graphics::par(\"ask\"),   ... )"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/plotMCMC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function that plot a mcmc.list object. — plotMCMC","text":"x null trace null density null smooth null bwf null auto.layout null ask null ... null","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/plotTP.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot a trophic position distribution — plotTP","title":"Function to plot a trophic position distribution — plotTP","text":"Wrapper siberDensityPlot.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/plotTP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot a trophic position distribution — plotTP","text":"","code":"plotTP(TPdist = NULL, ...)"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/plotTP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot a trophic position distribution — plotTP","text":"TPdist vector. One posterior distribution (collection) trophic  position. case wanting plot two posterior distributions, needs passed data.frame object. ... additional arguments passed function.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/plotTP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to plot a trophic position distribution — plotTP","text":"new figure window","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/plotTP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to plot a trophic position distribution — plotTP","text":"","code":"species1 <- stats::rnorm(1000, 4, 0.1) species2 <- stats::rnorm(1000, 3, 0.8) plotTP(data.frame(species1, species2))"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/posteriorTP.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to generate posterior samples of a trophic position JAGS model — posteriorTP","title":"Function to generate posterior samples of a trophic position JAGS model — posteriorTP","text":"wrapper coda.samples turn, wrapper jags.samples. extracts random samples posterior distribution parameters jags model.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/posteriorTP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to generate posterior samples of a trophic position JAGS model — posteriorTP","text":"","code":"posteriorTP(   model,   variable.names = c(\"TP\", \"muDeltaN\"),   n.iter = 10000,   burnin = NULL,   thin = 10,   quiet = FALSE,   ... )"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/posteriorTP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to generate posterior samples of a trophic position JAGS model — posteriorTP","text":"model JAGS model object returned functions jagsOneBaseline, jagsTwoBaselines, jagsTwoBaselinesFull jagsBayesianModel variable.names vector characters giving names variables monitored. n.iter integer defining number iterations. default 10000 burnin number iterations discarded burn . thin thinning interval get posterior samples. quiet logical value indicate whether messages generated posterior sampling suppressed, well progress bar. ... additional arguments passed coda.samples.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/posteriorTP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to generate posterior samples of a trophic position JAGS model — posteriorTP","text":"mcmc.list object containing posterior samples Bayesian model.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/posteriorTP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to generate posterior samples of a trophic position JAGS model — posteriorTP","text":"","code":"if (FALSE) { # \\dontrun{ isotopeData <- generateTPData() model.string <- jagsBayesianModel() model <- TPmodel(data = isotopeData, model.string = model.string, n.adapt = 500) posterior.samples <- posteriorTP(model, n.iter = 500) } # }"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/screenFoodWeb.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that creates a biplot of a food web with stable isotope values (d13C and d15N) — screenFoodWeb","title":"Function that creates a biplot of a food web with stable isotope values (d13C and d15N) — screenFoodWeb","text":"Function creates biplot food web stable isotope values (d13C d15N)","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/screenFoodWeb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that creates a biplot of a food web with stable isotope values (d13C and d15N) — screenFoodWeb","text":"","code":"screenFoodWeb(   df = NULL,   grouping = c(\"Species\", \"FG\"),   printSummary = FALSE,   ... )"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/screenFoodWeb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function that creates a biplot of a food web with stable isotope values (d13C and d15N) — screenFoodWeb","text":"df data frame contains isotope values. defaults, data frame needs following columns: d13C, d15N, Species FG. Species stands scientific name (common name), FG stands functional group species. grouping vector name columns (variables) used summarize, plot data frame. printSummary logical value indicate whether summary printed ... optional arguments passed function later use.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/screenFoodWeb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function that creates a biplot of a food web with stable isotope values (d13C and d15N) — screenFoodWeb","text":"ggplot2 object biplot data frame. Also prints   summary data frame needed.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/screenFoodWeb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function that creates a biplot of a food web with stable isotope values (d13C and d15N) — screenFoodWeb","text":"","code":"if (FALSE) { # \\dontrun{ data(\"Bilagay\") subset_CHI <- Bilagay[Bilagay[,\"Location\"] %in% \"CHI\",] screenFoodWeb(subset_CHI, grouping = c(\"Spp\", \"FG\")) } # }"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/screenIsotopeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot and screen stable isotope data with one or more baselines. — screenIsotopeData","title":"Function to plot and screen stable isotope data with one or more baselines. — screenIsotopeData","text":"function receives named list vectors (isotopeData class object), plots biplot 2 sources consumer. user can states whether /wants density function plotted , right, sides want plotted.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/screenIsotopeData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot and screen stable isotope data with one or more baselines. — screenIsotopeData","text":"","code":"screenIsotopeData(   isotopeData = NULL,   density = \"both\",   consumer = \"Consumer\",   b1 = \"Pelagic baseline\",   b2 = \"Benthic baseline\",   legend = c(1.15, 1.15),   title = NULL,   xylim = NULL,   ... )"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/screenIsotopeData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot and screen stable isotope data with one or more baselines. — screenIsotopeData","text":"isotopeData isotopeData class object. density string representing whether density function plotted. Accepted characters \"\" case plot density function right, \"right\", \"\" \"none\". consumer string representing consumer. b1 string representing baseline 1. b2 string representing baseline 2. legend coordinates representing locate legend. title string representing title. xylim argument modifying x-y limits (testing) ... additional arguments passed function.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/screenIsotopeData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to plot and screen stable isotope data with one or more baselines. — screenIsotopeData","text":"none","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/screenIsotopeData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to plot and screen stable isotope data with one or more baselines. — screenIsotopeData","text":"","code":"a <- generateTPData() screenIsotopeData(a)  #> [[1]] #> [[1]][[1]] #> TableGrob (1 x 2) \"arrange\": 1 grobs #>   z     cells    name           grob #> 1 1 (1-1,1-1) arrange gtable[layout] #>  #> [[1]][[2]] #> TableGrob (1 x 2) \"arrange\": 2 grobs #>   z     cells    name           grob #> 1 1 (1-1,1-1) arrange gtable[layout] #> 2 2 (1-1,2-2) arrange gtable[layout] #>  #>"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/simulateTDF.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate trophic discrimination factors — simulateTDF","title":"Simulate trophic discrimination factors — simulateTDF","text":"function returns trophic discrimination factors (TDF), given number observations, mean /standard deviation deltaN /deltaC.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/simulateTDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate trophic discrimination factors — simulateTDF","text":"","code":"simulateTDF(   nN = 56,   meanN = NULL,   sdN = 0.98,   nC = 107,   meanC = NULL,   sdC = 1.3,   seed = 3 )"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/simulateTDF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate trophic discrimination factors — simulateTDF","text":"nN number observations deltaN. meanN mean deltaN. sdN standard deviation deltaN. nC number observations deltaC. meanC mean deltaC. sdC standard deviation deltaC. seed numerical value indicate reproducible results.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/simulateTDF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate trophic discrimination factors — simulateTDF","text":"named list TDF values nitrogen /carbon","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/simulateTDF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate trophic discrimination factors — simulateTDF","text":"","code":"# 25 values of TDF for nitrogen, mean 3, sd, 1 simulateTDF(nN = 25, meanN = 3, sdN = 1) #>  [1] 2.130289 2.995148 3.707432 1.884557 3.626031 3.412003 3.483442 4.815718 #>  [9] 1.798349 5.010494 2.410844 1.911577 2.447566 3.699505 3.569523 2.975599 #> [17] 2.141808 2.535570 4.954868 3.631236 2.625697 2.155654 3.109872 1.220038 #> [25] 2.747180  # 18 values of TDF for carbon, mean 0.6, sd, 0.7 simulateTDF(nC = 18, meanC = 0.6, sdC = 0.7) #>  [1] -0.05669860  0.57395950  1.09335987 -0.23588717  1.03400164  0.87793215 #>  [7]  0.93002518  1.90152566 -0.29875020  2.04355730  0.14788309 -0.21618445 #> [13]  0.17466088  1.08757921  0.99279630  0.55970466 -0.04829863  0.23883359"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/simulateTEF.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate trophic enrichment factors — simulateTEF","title":"Simulate trophic enrichment factors — simulateTEF","text":"function returns trophic enrichment factors (TEF), given number observations, mean standard deviation deltaN /deltaC. function replaced simulateTDF, following convention naming trophic discrimination factors (TDF) instead trophic enrichment factors (TEF).","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/simulateTEF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate trophic enrichment factors — simulateTEF","text":"","code":"simulateTEF(   nN = 56,   meanN = NULL,   sdN = 0.98,   nC = 107,   meanC = NULL,   sdC = 1.3 )"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/simulateTEF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate trophic enrichment factors — simulateTEF","text":"nN number observations deltaN. meanN mean deltaN. sdN standard deviation deltaN. nC number observations deltaC. meanC mean deltaC. sdC standard deviation deltaC.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/simulateTEF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate trophic enrichment factors — simulateTEF","text":"named list TEF values nitrogen /carbon","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/simulateTEF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate trophic enrichment factors — simulateTEF","text":"","code":"#simulateTEF() is deprecated, use simulateTDF() instead:  # 25 values of TEF for nitrogen, mean 3, sd, 1 simulateTDF(nN = 25, meanN = 3, sdN = 1) #>  [1] 2.130289 2.995148 3.707432 1.884557 3.626031 3.412003 3.483442 4.815718 #>  [9] 1.798349 5.010494 2.410844 1.911577 2.447566 3.699505 3.569523 2.975599 #> [17] 2.141808 2.535570 4.954868 3.631236 2.625697 2.155654 3.109872 1.220038 #> [25] 2.747180  # 18 values of TEF for carbon, mean 0.6, sd, 0.7 simulateTDF(nC = 18, meanC = 0.6, sdC = 0.7) #>  [1] -0.05669860  0.57395950  1.09335987 -0.23588717  1.03400164  0.87793215 #>  [7]  0.93002518  1.90152566 -0.29875020  2.04355730  0.14788309 -0.21618445 #> [13]  0.17466088  1.08757921  0.99279630  0.55970466 -0.04829863  0.23883359"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/summariseIsotopeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that summarises a data frame containing stable isotope values (d13C and d15N) grouping by Species and FG columns — summariseIsotopeData","title":"Function that summarises a data frame containing stable isotope values (d13C and d15N) grouping by Species and FG columns — summariseIsotopeData","text":"wrapper plyr:ddply summarise data frame.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/summariseIsotopeData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that summarises a data frame containing stable isotope values (d13C and d15N) grouping by Species and FG columns — summariseIsotopeData","text":"","code":"summariseIsotopeData(   df = NULL,   grouping = c(\"Species\", \"FG\"),   printSummary = FALSE,   ... )"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/summariseIsotopeData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function that summarises a data frame containing stable isotope values (d13C and d15N) grouping by Species and FG columns — summariseIsotopeData","text":"df data frame contains isotope values. needs following columns: d13C, d15N, Species FG. Species stands scientific name (common name), FG stands functional group species. data frame Species FG columns, raise error. columns change names, need stated well grouping variable. grouping vector name columns (variables) used summarize, plot data frame. printSummary logical value indicating whether summary printed. ... optional arguments passed function later use.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/summariseIsotopeData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function that summarises a data frame containing stable isotope values (d13C and d15N) grouping by Species and FG columns — summariseIsotopeData","text":"data frame summary data frame.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/summariseIsotopeData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function that summarises a data frame containing stable isotope values (d13C and d15N) grouping by Species and FG columns — summariseIsotopeData","text":"","code":"data('Bilagay') subset_CHI <- Bilagay[Bilagay[,'Location'] %in% 'CHI',] summariseIsotopeData(subset_CHI, grouping = c('Spp', 'FG')) #>                         Spp         FG nC      meanC       sdC       seC nN #> 1                   Bilagay    Bilagay 18 -14.066667 0.7194769 0.1695823 18 #> 2 Echinolittorina peruviana Benthic_BL 12 -10.483333 1.4427457 0.4164848 12 #> 3    Perumytilus purpuratus Pelagic_BL 26 -14.938462 0.5192895 0.1018410 26 #> 4          Scurria viridula Benthic_BL  9  -9.866667 3.0508196 1.0169399  9 #> 5                    Tegula Benthic_BL  8 -10.800000 1.4282857 0.5049752  8 #>      meanN       sdN        seN #> 1 21.95556 0.3484794 0.08213739 #> 2 15.95000 1.3813695 0.39876704 #> 3 16.14231 0.4051401 0.07945450 #> 4 15.61111 0.9726824 0.32422748 #> 5 17.86250 0.3543102 0.12526757"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/summary.isotopeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for stable isotope data — summary.isotopeData","title":"Summary for stable isotope data — summary.isotopeData","text":"Summary stable isotope data","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/summary.isotopeData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for stable isotope data — summary.isotopeData","text":"","code":"# S3 method for class 'isotopeData' summary(object, print = TRUE, round_dec = 1, ...)"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/summary.isotopeData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for stable isotope data — summary.isotopeData","text":"object isotopeData class object. print logical value indicate whether summary printed. round_dec number decimals kept. ... additional arguments passed function.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/summary.isotopeData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary for stable isotope data — summary.isotopeData","text":"list number observations, mean, standard deviation, standard error, minimum, maximum median element isotopeData class object.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/summary.isotopeData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary for stable isotope data — summary.isotopeData","text":"","code":"a <- generateTPData() summary(a) #>  #> Summary for stable isotope data object  #>  #>  #>        n   mean  sd  se  min   max   median #> dNb1   25  -3.3  1   0.2 -5.8  -1.7  -3.2   #> dCb1   25  -22.7 1   0.2 -24.7 -20.8 -22.9  #> dNb2   25  -6.5  1   0.2 -8.3  -4.6  -6.5   #> dCb2   25  12.5  1   0.2 10.7  14.8  12.5   #> dNc    25  3.5   1   0.2 1.4   5.6   3.5    #> dCc    25  1.8   1   0.2 0.1   3.3   1.9    #> deltaN 56  3.4   1   0.1 1.1   5.4   3.3    #> deltaC 107 0.4   1.3 0.1 -3.2  3     0.6"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/trophicDensityPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot posterior samples of trophic position estimates — trophicDensityPlot","title":"Function to plot posterior samples of trophic position estimates — trophicDensityPlot","text":"function receives data frame sampled posterior trophic position estimates. user may set /wants quantiles plotted, case 95 can states whether /wants density plots grouped . visualization purposes, density functions look better grouped, quantiles added.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/trophicDensityPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot posterior samples of trophic position estimates — trophicDensityPlot","text":"","code":"trophicDensityPlot(df = NULL, quantiles = FALSE, grouped = TRUE)"},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/trophicDensityPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot posterior samples of trophic position estimates — trophicDensityPlot","text":"df data frame 2 variables: \"TP\" \"Species\". TP can posterior samples trophic position Species must factor. quantiles logical variable. TRUE 95 distribution, plus mean median added plot. grouped logical variable. TRUE trophic position density plots grouped.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/trophicDensityPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to plot posterior samples of trophic position estimates — trophicDensityPlot","text":"ggplot2::ggplot object","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/reference/trophicDensityPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to plot posterior samples of trophic position estimates — trophicDensityPlot","text":"","code":"species1 <- stats::rnorm(1000, 4, 0.1) species2 <- stats::rnorm(1000, 3, 0.8) TP <- c(species1, species2) Species <- c(rep(\"Species 1\", length(species1)), rep(\"Species 2\", length(species2))) df <- data.frame(TP, Species) trophicDensityPlot(df)"},{"path":"https://benjaminhlina.github.io/tRophicPosition/news/index.html","id":"trophicposition-v075-release-date-2018-01-29","dir":"Changelog","previous_headings":"","what":"tRophicPosition v0.7.5 (Release date: 2018-01-29)","title":"tRophicPosition v0.7.5 (Release date: 2018-01-29)","text":"CRAN release: 2018-01-29 Added function extractPredictiveData() perform posterior predictive model-checking procedure. Implemented code coverage unit test. Improved code (make clearer, considering width assignment operator). Changed arguments (consumer instead species, group instead community others) loadIsotopeData(), extractIsotopeData() functions (maintaining old arguments compatibility) Added procedure checking errors priors arguments jagsBayesianModel related functions Removed MCMCvis Short guide tRophicPosition vignette, package longer CRAN.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/news/index.html","id":"trophicposition-v073-release-date-2017-10-12","dir":"Changelog","previous_headings":"","what":"tRophicPosition v0.7.3 (Release date: 2017-10-12)","title":"tRophicPosition v0.7.3 (Release date: 2017-10-12)","text":"CRAN release: 2017-10-12 Minor details fulfil CRAN checks","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/news/index.html","id":"trophicposition-v072-release-date-2017-10-12","dir":"Changelog","previous_headings":"","what":"tRophicPosition v0.7.2 (Release date: 2017-10-12)","title":"tRophicPosition v0.7.2 (Release date: 2017-10-12)","text":"Fixed loadIsotopeData() loading species without community iterate . Added stable isotope data examples (Finnish Lakes Roach) Improved credibilityIntervals(). Now accepts legend position (TP alpha plots), grouping variable (plot groups different colours), manual colours (scale_colour_manual) using group_by, labels x axis.","code":""},{"path":"https://benjaminhlina.github.io/tRophicPosition/news/index.html","id":"trophicposition-v070-release-date-2017-06-11","dir":"Changelog","previous_headings":"","what":"tRophicPosition v0.7.0 (Release date: 2017-06-11)","title":"tRophicPosition v0.7.0 (Release date: 2017-06-11)","text":"CRAN release: 2017-06-12 First release version submitted CRAN. List capabilities","code":""}]
